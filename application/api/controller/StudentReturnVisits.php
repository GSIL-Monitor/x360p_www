<?php
/**
 * Author: luo
 * Time: 2018/1/10 18:02
 */

namespace app\api\controller;


use app\api\model\Config;
use app\api\model\Student;
use app\api\model\StudentAbsence;
use app\api\model\StudentLeave;
use app\api\model\StudentLesson;
use app\api\model\StudentReturnVisit;
use app\sapi\model\Advice;
use think\Request;

class StudentReturnVisits extends Base
{
    /**
     * @desc  回访列表
     * @author luo
     * @param Request $request
     * @method GET
     */
    public function get_list(Request $request)
    {
        return parent::get_list($request); // TODO: Change the autogenerated stub
    }

    /**
     * @desc  需要回访的学员
     * @author luo
     * @method GET
     */
    public function students()
    {
        $page = input('page/d', 0);
        $pagesize = input('pagesize/d', config('default_pagesize'));
        $type = input('type', 'ask_leave_times');

        switch ($type) {
            case 'ask_leave_times': # 请假超过一定次数需要回访的学生
                $ask_leave_times = input('ask_leave_times', StudentReturnVisit::config_condition_times('ask_leave_times'));
                $m_sl = new StudentLeave();
                $count_list = $m_sl->scope('bid')->field('sid, count("sid") as count_num')->group('sid')->having('count_num >= '.$ask_leave_times)
                    ->page($page,$pagesize)->select();
                $total = $m_sl->scope('bid')->field('sid, count("sid") as count_num')->group('sid')->having('count_num >= '.$ask_leave_times)
                    ->count();
                break;

            case 'absence_times': # 缺勤超过一定次数需要回访的学生
                $absence_times = input('absence_times', StudentReturnVisit::config_condition_times('absence_times'));
                $m_sa = new StudentAbsence();
                $count_list = $m_sa->scope('bid')->field('sid, count("sid") as count_num')->group('sid')->having('count_num >= '.$absence_times)
                    ->page($page,$pagesize)->select();
                $total = $m_sa->scope('bid')->field('sid, count("sid") as count_num')->group('sid')->having('count_num >= '.$absence_times)
                    ->count();
                break;

            case 'student_lesson_remain_times': # 剩余课次达到一定次数的学生
                $remain_times = input('student_lesson_remain_times',
                    StudentReturnVisit::config_condition_times('student_lesson_remain_times'));
                $m_sl = new StudentLesson();
                $count_list = $m_sl->scope('bid')->alias('sl')->join('Lesson le','sl.lid = le.lid','left')->where('sl.remain_lesson_hours', '<=', $remain_times)->field('sl.sid, sl.remain_lesson_hours as count_num, le.lesson_name')
                    ->page($page, $pagesize)->select();
                $total = $m_sl->scope('bid')->where('remain_times', '<=', $remain_times)->count();
                break;

            case 'student_lesson_remain_rate': # 剩余课次比率达到一定次数的学生
                $remain_rate = input('student_lesson_remain_rate',
                    StudentReturnVisit::config_condition_times('student_lesson_remain_rate'));
                $m_sl = new StudentLesson();
                $count_list = $m_sl->scope('bid')->where('remain_times/lesson_times <= ' . $remain_rate)
                    ->field('sid, remain_times/lesson_times as count_num')->page($page, $pagesize)->select();
                $total = $m_sl->scope('bid')->where('remain_times/lesson_times <= ' . $remain_rate)
                    ->count();
                break;
            case 'advice':  # 手机端有投诉建议的学员
                $m_advice = new Advice();
                $count_list = $m_advice->scope('bid')->field('sid, count("sid") as count_num')->group('sid')
                    ->page($page,$pagesize)->select();
                $total = $m_advice->scope('bid')->field('sid, count("sid") as count_num')->group('sid')
                    ->count();
                break;

            default :
                break;
        }

        //学生列表
        if(isset($count_list) && !empty($count_list)) {
            $m_student = new Student();
            $student_list = [];
            foreach ($count_list as $row) {
                $tmp = [];
                $tmp['count_num'] = $row['count_num'];
                if (isset($row['lesson_name'])){
                    $tmp['lesson_name'] = $row['lesson_name'];
                }
                $student = $m_student->with('studentReturnVisit')->where('sid', $row['sid'])->find();
                $tmp['student'] = empty($student) ? null : $student->toArray();
                array_push($student_list, $tmp);
            }
        }

        //返回数据
        $data = [
            'total' => isset($total) ? $total : 0,
            'page' => $page,
            'pagesize' => $pagesize,
            'list' => isset($student_list) ? $student_list : [],
        ];
        return $this->sendSuccess($data);
    }

    /**
     * @desc  添加回访
     * @author luo
     * @param Request $request
     * @method POST
     */
    public function post(Request $request)
    {
        $post = $request->post();
        $m_srv = new StudentReturnVisit();
        $rs = $m_srv->addOneVisit($post);
        if($rs === false) return $this->sendError(400, $m_srv->getErrorMsg());

        return $this->sendSuccess();
    }

    public function delete(Request $request)
    {
        $srv_id = input('id');
        $student_return_visit = StudentReturnVisit::get($srv_id);
        if(empty($student_return_visit)) return $this->sendSuccess();
        
        $rs = $student_return_visit->delOne();
        if($rs === false) return $this->sendError(400, $student_return_visit->getErrorMsg());

        return $this->sendSuccess();
    }

    public function put(Request $request)
    {
        return $this->sendError(400, 'not support');
    }


}