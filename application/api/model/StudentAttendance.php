<?php
/**
 * Author: luo
 * Time: 2017-10-23 19:28
**/

namespace app\api\model;

use app\common\Wechat;
use think\Exception;
use think\Hook;
use think\Validate;

class StudentAttendance extends Base
{

    /*考勤方式(0:后台登记,1:刷卡考勤,2:老师点名考勤)*/
    const ATT_WAY_REGISTER   = 0;
    const ATT_WAY_SWIPE_CARD = 1;
    const ATT_WAY_CALL_NAME  = 2;
    const ATT_WAY_FREE       = 3;
    const ATT_WAY_FACE       = 4;
    
     public static $detail_fields = [
        ['type'=>'index','width'=>60,'align'=>'center'],
        ['title'=>'校区','key'=>'bid','align'=>'center'],
        ['title'=>'学员姓名','key'=>'sid','align'=>'center'],
        ['title'=>'是否出勤','key'=>'is_in','align'=>'center'],
        ['title'=>'出勤时间','key'=>'in_time','align'=>'center'],
    ];

    protected $auto = ['in_time'];

    protected $type = [
        'is_consume' => 'boolean',
    ];

    protected $append = ['course_name','makeup'];

    public static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //StudentAttendance::event('after_insert', function ($model) {
        //    if (!empty($model['ca_id'])) {
        //        //不是班课，并且是排课考勤
        //        $w = [];
        //        $w['ca_id'] = $model['ca_id'];
        //        $w['sid']   = $model['sid'];
        //        $course_arrange_student = CourseArrangeStudent::get($w);
        //        $course_arrange_student->data('is_attendance', 1)->data('satt_id', $model['satt_id'])->save();
        //    }
        //    //更新student表和student_lesson表的last_attendance_time字段(如果比原始值大)
        //    $attendance_time = int_day_hour_to_time($model['int_day'], $model['int_start_hour']);
        //    $student = Student::get($model['sid']);
        //    if ($student && $attendance_time > $student['last_attendance_time']) {
        //        $student->data('last_attendance_time', $attendance_time)->save();
        //    }
        //});

        StudentAttendance::event('after_delete', function ($model) {
            if ($model['lesson_type'] !== Lesson::LESSON_TYPE_CLASS && !empty($model['ca_id'])) {
                //不是班课，并且是排课考勤
                $w = [];
                $w['ca_id'] = $model['ca_id'];
                $w['sid']   = $model['sid'];
                $course_arrange_student = CourseArrangeStudent::get($w);
                $course_arrange_student->data('is_attendance', 0)->data('satt_id', 0)->save();
            }
            $attendance_time = int_day_hour_to_time($model['int_day'], $model['int_start_hour']);
            $student = Student::get($model['sid']);
            if ($student && $attendance_time == $student['last_attendance_time']) {
                $last_student_attendance = (new self())->where('sid', $model['sid'])
                    ->order('int_day', 'desc')
                    ->order('int_start_hour', 'desc')
                    ->limit(0, 1)
                    ->find();
                if (empty($last_student_attendance)) {
                    $student->data('last_attendance_time', 0)->save();
                } else {
                    $last_attendance_time = int_day_hour_to_time($last_student_attendance['int_day'], $last_student_attendance['int_start_hour']);
                    $student->data('last_attendance_time', $last_attendance_time)->save();
                }
            }
        });
    }

    public $attendance_info = [];

    public $attendance_fail_report = [];


    

    public function studentLesson()
    {
        return $this->belongsTo('StudentLesson', 'sl_id', 'sl_id');
    }

    public function branch()
    {
        return $this->belongsTo('Branch', 'bid', 'bid');
    }

    public function student()
    {
        return $this->belongsTo('Student', 'sid', 'sid')->field(['sid', 'student_name', 'birth_time', 'photo_url', 'bid', 'sno']);
    }

    public function courseArrange()
    {
        return $this->belongsTo('CourseArrange', 'ca_id', 'ca_id');
    }

    public function classAttendance()
    {
        return $this->belongsTo('ClassAttendance', 'catt_id', 'catt_id');
    }

    public function makeup()
    {
        return $this->hasOne('MakeupArrange', 'satt_id', 'satt_id');
    }

    public function studentLessonHour()
    {
        return $this->hasOne('StudentLessonHour', 'satt_id', 'satt_id');
    }

    public function cls()
    {
        return $this->belongsTo('Classes', 'cid', 'cid')->field(['cid', 'class_name', 'teach_eid', 'edu_eid']);
    }

    public function employee() {
        return $this->belongsTo('Employee', 'eid', 'eid')->field(['eid', 'ename']);
    }

    public function absence()
    {
        return $this->hasOne('StudentAbsence', 'satt_id', 'satt_id');
    }

    public function getCourseNameAttr($value,$data){
        $course_name = get_course_name_by_row($data);

        return $course_name;
    }

    public function getMakeupAttr($value,$data){
        if(!isset($data['is_makeup'])){
            return null;
        }
        if($data['is_makeup'] == 0){
            return null;
        }
        $w['satt_id'] = $data['satt_id'];
        $ma_info = get_ma_info($w);
        if(!$ma_info){
            return null;
        }
        $ma_info['leave']   = null;
        $ma_info['absence'] = null;

        if($ma_info['slv_id'] > 0){
            $slv_info = get_slv_info($ma_info['slv_id']);
            if($slv_info) {
                $ma_info['leave'] = $slv_info;
            }
        }

        if(is_null($ma_info['leave']) && $ma_info['sa_id'] > 0){
            $sa_info = get_sa_info($ma_info['sa_id']);
            if($sa_info){
                $sa_info['absence'] = $sa_info;
            }
        }

        return $ma_info;

    }

    public function setInTimeAttr($value, $data)
    {
        if ($value) {
            return $value;
        } else {
            if (isset($data['int_day'], $data['int_start_hour'])) {
                return int_to_time($data['int_day'], $data['int_start_hour']);
            }
        }
        return 0;
    }

    public function getInTimeAttr($value)
    {
        if (!empty($value)) {
            return date('Y-m-d H:i:s', $value);
        }
    }

    public function lesson()
    {
        return $this->belongsTo('Lesson', 'lid', 'lid');
    }

    public function subject()
    {
        return $this->belongsTo('Subject', 'sj_id', 'sj_id');
    }



    protected function init_satt_info($satt_id){
        if($satt_id == 0){
            $satt_info = $this->getData();
        }else{
            $satt_info = get_satt_info($satt_id);
            $this->data($satt_info);
        }
        if(empty($satt_info)){
            return $this->user_error('参数错误:satt_id');
        }
        return $satt_info;
    }

    /**
     * 取消学员考勤
     * @param bool $refresh_catt
     * @param int $satt_id
     * @return bool
     */
    public function cancelAttendance($refresh_catt = true,$satt_id = 0){
        $satt_info = $this->init_satt_info($satt_id);
        if(!$satt_info){
            return false;
        }
        if(!$this->checkDelParamsPermit($satt_id)){
            return false;
        }
        $satt_id = $satt_info['satt_id'];
        $catt_id = $satt_info['catt_id'];

        $this->startTrans();
        try{

            $update_cas = [];
            if($satt_info['is_makeup']){

                $w_ma_update['satt_id'] = $satt_id;
                $m_ma = new MakeupArrange();
                $ma = $m_ma->where($w_ma_update)->find();

                if($ma){
                    $sa_id = $ma['sa_id'];
                    $ma->satt_id = 0;
                    $ma->catt_id = 0;
                    $result = $ma->save();
                    if(false === $result){
                        $this->rollback();
                        return $this->sql_save_error('makeup_arrange');
                    }

                    //更新缺课记录状态
                    $w_sa_update = [];
                    $w_sa_update['sa_id'] = $sa_id;
                    $update_sa['status'] = 1;

                    $m_student_absence = new StudentAbsence();
                    $result = $m_student_absence->save($update_sa,$w_sa_update);
                    if(false === $result){
                        $this->rollback();
                        return $this->sql_save_error('student_absence');
                    }
                }
            }

            if($satt_info['is_consume']){
                $mStudentLessonHour = new StudentLessonHour();
                $result = $mStudentLessonHour->rollbackLessonHour($satt_id);
                if(!$result){
                    $this->rollback();
                    return $this->user_error($mStudentLessonHour->getError());
                }
            }

            //删除缺课记录
            if($satt_info['is_in'] == 0){
                $w_sa = [];
                array_copy($w_sa,$satt_info,['sid','int_day','int_start_hour','int_end_hour']);

                $m_student_absence = new StudentAbsence();

                $result = $m_student_absence->where($w_sa)->delete();

                if(false === $result){
                    $this->rollback();
                    return $this->sql_delete_error('student_absence');
                }


            }

            //删除请假记录
            if($satt_info['is_leave'] == 1){
                $w_slv['satt_id'] = $satt_id;
                $w_slv['create_time'] = $satt_info['create_time'];
                $m_slv = new StudentLeave();

                $result = $m_slv->where($w_slv)->delete();
                if(false === $result){
                    $this->rollback();
                    return $this->sql_delete_error('student_leave');
                }

                if($result > 0){
                    $update_cas['is_leave'] = 0;
                    $update_cas['remark'] = '';
                }
            }


            //更新排课记录
            $m_cas = new CourseArrangeStudent();
            $update_cas['is_attendance'] = 0;
            $update_cas['satt_id'] = 0;
            $update_cas['is_in'] = -1;
            $update_cas['has_extra_consume'] = 0;
            $update_cas['is_consume'] = 0;


            $w_cas_update['satt_id'] = $satt_id;

            $result = $m_cas->save($update_cas,$w_cas_update);

            if(false === $result){
                $this->rollback();
                return $this->sql_save_error('course_arrange_student');
            }

            //删除考勤
            $result = $this->delete(true);
            if(false === $result){
                $this->rollback();
                return $this->sql_delete_error('student_attendance');
            }



            if($refresh_catt){
                $m_catt = ClassAttendance::get($catt_id);
                if($m_catt) {
                    //更新统计字段
                    $result = $m_catt->refresh();
                    if (false === $result) {
                        $this->rollback();
                        return $this->user_error($m_catt->getError());
                    }
                }
            }

        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;

    }
    
    public function countAttendanceOfDay($day)
    {
        $num = $this->scope('bid')->where('is_in', 1)->where('int_day', $day)->count();
        return $num;
    }
    
    public function countShouldAttendanceOfDay($day)
    {
        $num = $this->scope('bid')->where('int_day', $day)->count();
        return $num;
    }

    public function wechat_tpl_notify()
    {
        $wechat = Wechat::getInstance($this);
        $message['appid'] = $wechat->appid;

        $scene = 'attendance_inform';
        $default_template_setting = config('tplmsg')[$scene];
        $message['url'] = tplmsg_url($default_template_setting['weixin']['url']);//todo  替换[host]和业务[id]

        if ($wechat->default) {
            $message['template_id'] = $default_template_setting['weixin']['template_id'];
        } else {
            $w = [];
            $w['appid'] = $message['appid'];
            $w['scene'] = $scene;
            $target_tpl = WxmpTemplate::get($w);
            if (empty($target_tpl)) {
                //该公众号还没有成功设置该模板.
                return false;
            }
            $message['template_id'] = $target_tpl['template_id'];
        }

        $user_template_setting = isset(Config::userConfig()['wechat_template'][$scene]) ? Config::userConfig()['wechat_template'][$scene] : null;
        if (empty($user_template_setting)) {
            //客户如果没有设置公众号的模板消息的first字段、remark字段和颜色的设置，则使用系统默认的公众号的设置
            $user_template_setting = $default_template_setting;
        }

        $student = $this->getAttr('student');
        $temp = [];
        /*变量要根据[tpl_fields]的顺序来!important*/
        $temp['student_name'] = $student['student_name'];
        $temp['time']         = date('Y-m-d H:i:s', request()->time());
        $temp['time']         = $this->getAttendanceTime();
        $temp['address']      = $this->getAttr('branch')['branch_name'];
        $temp['org_name']     = $this->getOrgName();

        $search  = array_values($user_template_setting['tpl_fields']);
        $replace = array_values($temp);

        $data = $user_template_setting['weixin']['data'];
        foreach ($data as &$subject) {
            $subject = str_replace($search, $replace, $subject);
        }
        $sms_message = str_replace($search, $replace, $user_template_setting['sms']['tpl']);
        $message['data'] = $data;

        $user_list = $student['user'];
        if (empty($user_list)) {
            throw new Exception('该学生没有关联的家长账号!');
        }
        $inner_message = [];
        $inner_message['og_id'] = $this->getData('og_id');
        $inner_message['bid'] = $this->getData('bid');
        $inner_message['cid'] = $this->getData('cid');
        $inner_message['sid'] = $this->getData('sid');
        $inner_message['business_type'] = $scene;
        $inner_message['business_id'] = $this->getData('satt_id');
        $inner_message['title']   = $default_template_setting['message']['title'];
        $inner_message['content'] = str_replace($search, $replace, $default_template_setting['message']['content']);
        $inner_message['url']     = $message['url'];
        foreach ($user_list as $user) {
            $inner_message['uid'] = $user['uid'];
            Message::create($inner_message);
            if ($user['mobile'] && $user_template_setting['sms_switch']) {
                queue_push('SendSmsMsg', [$user['mobile'], $sms_message]);
            }
            if ($user['openid'] && $user_template_setting['weixin_switch']) {
                $w = [];
                $w['appid']  = $message['appid'];
                $w['openid'] = $user['openid'];
                $w['subscribe'] = WxmpFans::SUBSCRIBE;
                if (WxmpFans::get($w)) {
                    $message['openid'] = $user['openid'];
                    queue_push('SendWxTplMsg', $message);
                }
            }

        }
    }

    public function getAttendanceTime(){
        $int_day = $this->getData('int_day');
        $int_start_hour = $this->getData('int_start_hour');

        $time = int_day_to_date_str($int_day).' '.int_hour_to_hour_str($int_start_hour);

        return $time;
    }

    public function getOrgName(){
        $og_id = $this->getData('og_id');
        if($og_id == 0){
            $org_name = user_config('params.org_name');
        }else{
            $org = Org::get($og_id);
            $org_name = $org['org_name'];
        }
        return $org_name;
    }




    /**
     * 根据班级考勤记录录入学员考勤记录
     * @param  [type] $input_sinfo [学员考勤状态]
     * @param  [type] $catt_info   [教师上课情况]
     * @param  [type] $user_input  [用户实际输入信息]
     * @param  [type] $extra_consume [额外课消]
     * @return [type]              [description]
     */
    public function regSattByCatt($input_sinfo,$catt_info,$user_input = [],$extra_consume = []){
        //如果是试听,那么走试听处理的流程
        if($input_sinfo['is_trial']){
            $m_trial_listen_arrange = new TrialListenArrange();
            return $m_trial_listen_arrange->regByCatt($catt_info,$input_sinfo);
        }

        $is_push = isset($user_input['is_push'])?$user_input['is_push']:null;

        $satt = [];
        $satt['att_way']        = isset($user_input['att_way'])?$user_input['att_way']:0;   //考勤方式
        $satt['in_time']        = $satt['att_way'] == 1 ? time():0;                         //出勤时间（考勤方式为0时也为0)
        $satt['is_in']          = $input_sinfo['is_in'];
        $satt['is_leave']       = intval($input_sinfo['is_leave']);

        array_copy($satt,$catt_info,
                    ['og_id','bid','sj_id','grade','cid','lid','chapter_index',
                    'lesson_type','ca_id','eid','second_eid',
                    'int_day','int_start_hour','int_end_hour',
                    'catt_id','consume_lesson_hour','consume_source_type','consume_lesson_amount']
                );

        //array_copy($satt,$input_sinfo,['sid','is_consume','is_makeup','remark','consume_source_type','consume_lesson_amount']);

        array_copy($satt,$input_sinfo,['sid','is_consume','is_makeup','remark']);

        $satt['second_eids'] = $catt_info['second_eids'] ? explode(',',$catt_info['second_eids']) : [];

        /*
	    这里现暂时禁用，是实现同一次考勤对不同的学生扣不同的课时，暂时没有这个需求
        if(floatval($input_sinfo['consume_lesson_hour']) != 0){
            $satt['consume_lesson_hour'] = $input_sinfo['consume_lesson_hour'];
        }*/

        if(isset($user_input['consume_lesson_hour']) && !empty($user_input['consume_lesson_hour'])) {
            $satt['consume_lesson_hour'] = floatval($user_input['consume_lesson_hour']);
        }

        if(isset($user_input['consume_lesson_amount'])){
            $satt['consume_lesson_amount'] = floatval($user_input['consume_lesson_amount']);
        }

        if(isset($input_sinfo['is_reset']) && $input_sinfo['is_reset']){
            $satt['consume_lesson_amount'] = $input_sinfo['consume_lesson_amount'];
        }


        $result = $this->regOneSatt($satt,$is_push,$extra_consume);

        if(!$result){
            return false;
        }
        return $result;
    }

    /**
     * 取消关联的课耗扣除
     * @return [type] [description]
     */
    public function cancelStudentLessonHour(){
        $w_slh['satt_id'] = $this->getData('satt_id');

        $m_slh = $this->m_student_lesson_hour->where($w_slh)->find();

        if(!$m_slh){
            //严重错误，数据不完整
            return $this->user_error('发生错误,考勤记录关联的课耗记录不存在!satt_id:'.$w_slh['satt_id']);
        }

        $sl_id = $m_slh->sl_id;

        $this->startTrans();

        try{
            if($sl_id > 0){
                $w_sl['sl_id'] = $sl_id;
                $m_sl = $this->m_student_lesson->where($w_sl)->find();

                if($m_sl){
                    $consume_lesson_hour = $m_slh->lesson_hours;
                    //恢复扣除的课时
                    $update_sl = [];
                    $update_sl['use_lesson_hours']    = $m_sl->use_lesson_hours - $consume_lesson_hour;
                    $update_sl['remain_lesson_hours'] = $m_sl->remain_lesson_hours + $consume_lesson_hour;

                    $w_sl_update = [];
                    $w_sl_update['sl_id'] = $sl_id;

                    $result = $this->m_student_lesson->save($update_sl,$w_sl_update);

                    if(false === $result){
                        $this->rollback();
                        return $this->sql_save_error('student_lesson');
                    }
                }
            }

            $result = $m_slh->delete();
            if(false === $result){
                return $this->sql_delete_error('student_lesson_hour');
            }

        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return true;

    }

    /**
     * 登记一次学员考勤
     * @param  [type] $satt [description]
     * @return [type]       [description]
     */
    public function regOneSatt($satt,$is_push = null,$extra_consume = []){


        //首先判断同一时间、同一学员的考勤记录是否存在
        $w_satt = [];
        array_copy($w_satt,$satt,['sid','int_start_hour','int_end_hour','int_day']);

        $m_satt = $this->where($w_satt)->find();

        $lesson_start_time = int_day_hour_to_time($satt['int_day'],$satt['int_start_hour']);

        if($satt['in_time'] > 0){
            
            if($satt['in_time'] > $lesson_start_time + 60){      //如果迟到60秒，计迟到
                $satt['is_late'] = 1;
            }
        }


        $has_extra_consume = 0;
        $this->startTrans();

        try{
            if(!$m_satt){
                //先做课消记录
                //如果扣课时，做扣课时处理
                $this->data($satt);
                $slh_id = 0;
                if($satt['is_consume']){
                    if(isset($satt['consume_source_type']) && $satt['consume_source_type'] == 2) {
                        //增加从钱包扣课消 20181031
                        $result = $this->consumeStudentMoney($satt,$extra_consume);
                    }else{
                        $result = $this->consumeStudentLessonHour($satt['consume_lesson_hour'], $lesson_start_time, $extra_consume);
                    }
                    if(false === $result){
                        $this->rollback();
                        return false;
                    }
                    if(empty($result)){
                        $satt['is_consume'] = 0;
                    }else{
                        if(count($result) > 1){
                            $has_extra_consume = 1;
                            $satt['has_extra_consume'] = 1;
                        }
                    }

                    $slh_ids = $result;
                }

                $result = $this->data([])->isUpdate(false)->save($satt);
                if(!$result){
                    $this->rollback();
                    return $this->sql_add_error('student_attendance');
                }
                $satt_id = $this->satt_id;

                $satt['satt_id'] = $satt_id;

                if(!empty($slh_ids)){
                    foreach($slh_ids as $slh_id) {
                        $m_slh = StudentLessonHour::get($slh_id);
                        $m_slh->satt_id = $satt_id;
                        $result = $m_slh->save();
                        if (false === $result) {
                            $this->rollback();
                            return $this->sql_save_error('student_lesson_hour');
                        }
                    }
                }

                $m_satt = $this;
                add_service_record('attendance', ServiceRecord::GetAttendanceData($satt_id));

                if($m_satt['is_in']){
                    //如果是补课，那么更新或创建补课记录
                    if($m_satt['is_makeup']){
                        $result = $m_satt->addOrUpdateMakeupArrange();
                        if(!$result){
                            $this->rollback();
                            return $this->user_error($m_satt->getError());
                        }

                    }else{
                        //如果正常出勤，取消同时段的缺课记录
                        $result = $m_satt->cancelAbsenceRecord();
                        if(!$result){
                            $this->rollback();
                            return $this->user_error($m_satt->getError());
                        }
                    }

                    $hook_data = [
                        'hook_action' => 'attendance',
                        'sid' => $satt['sid'],
                    ];
                    Hook::listen('handle_credit', $hook_data);

                    //发送考勤通知mo
                    if(!is_null($is_push) && $is_push){
                        $mMessage = new \app\api\model\Message;
                        $mMessage->sendTplMsg('attendance_inform',$satt);
                    }

                }else{
                    if(!$m_satt['is_makeup']){
                        $result = $m_satt->addOrUpdateAbsenceRecord();
                        if(!$result){
                            $this->rollback();
                            return $this->user_error($m_satt->getError());
                        }
                    }
                }

                Student::updateLastAttendanceTime($satt['sid'], time());
            }else{
                //如果已经有考勤记录
                if($m_satt['ca_id'] != $satt['ca_id']){
                    $student_name = get_student_name($satt['sid']);
                    $teacher_name = get_employee_name($m_satt['eid']);
                    if($m_satt['cid'] > 0){
                        $lesson_name = get_class_name($m_satt['cid']);
                    }else{
                        $lesson_name = get_lesson_name($m_satt['lid']);
                    }
                    $error_msg = sprintf("「%s」在同一时段存在另外的考勤记录,授课老师是%s,课程班级是:%s",$student_name,$teacher_name,$lesson_name);
                    $this->rollback();
                    return $this->user_error($error_msg);
                }
                $satt['satt_id'] = $m_satt['satt_id'];
            }
        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        $satt['has_extra_consume'] = $has_extra_consume;

        return $satt;
    }

    /**
     * 根据学员考勤记录登记学员课时课耗-从钱包余额扣除
     * @param $satt
     * @param array $extra_consume
     * @return array
     */
    public function consumeStudentMoney($satt_info,$extra_consume = []){


        $sid    = $satt_info['sid'];
        $total_consume_lesson_amount = $satt_info['consume_lesson_amount'];
        $slh_ids = [];
        $mStudentLessonHour = new StudentLessonHour();

        $w_slh = [];
        $w_slh['change_type'] = 1;
        array_copy($w_slh,$satt_info,['sid','int_day','int_start_hour','int_end_hour']);


        $slh_list = $mStudentLessonHour->where($w_slh)->select();

        $this->startTrans();

        try{
            if(!$slh_list){
                //创建学员课时消耗记录
                $slh_info = [];
                $slh_info['change_type'] = 1;
                array_copy($slh_info,$satt_info,
                    ['og_id','bid',
                        'sid','lid','sj_id','grade','cid','sl_id',
                        'lesson_type','ca_id','satt_id','catt_id',
                        'int_day','int_start_hour','int_end_hour',
                        'eid','second_eid','is_makeup'
                    ]);

                $slh_info['second_eids'] = $satt_info['second_eids'] ? $satt_info['second_eids'] : [];

                $slh_info['lesson_hours']   = 1;
                $slh_info['source_type'] = 2;
                $slh_info['lesson_amount'] = $satt_info['consume_lesson_amount'];
                $slh_info['lesson_minutes'] = cacu_minutes($satt_info['int_start_hour'],$satt_info['int_end_hour']);

                $slh_info['is_pay'] = 1;
                $slh_info['sl_id'] = 0;


                // 登记学员课耗时添加学员导师ID
                if($slh_info['lesson_type']==0){
                    $class_info = get_class_info($slh_info['cid']);
                    $slh_info['edu_eid'] = $class_info['edu_eid'];
                }elseif($slh_info['lesson_type']==1 || $slh_info['lesson_type']==2){
                    $es_info = m('employee_student')->where('sid',$sid)->find();
                    $slh_info['edu_eid'] = $es_info['eid'];
                }

                $result = $mStudentLessonHour->data([])->isUpdate(false)->save($slh_info);

                if(!$result){
                    $this->rollback();
                    return $this->sql_add_error('student_lesson_hour');
                }

                $slh_ids[] = $mStudentLessonHour->slh_id;

                //额外课消
                if(!empty($extra_consume) && !empty($extra_consume['consume_lesson_amount'])){
                    $extra_slh_info = $slh_info;
                    $extra_slh_info['is_extra_consume'] = 1;
                    $extra_slh_info['second_eid'] = 0;
                    $extra_slh_info['second_eids'] = '';
                    $extra_slh_info['edu_eid'] = 0;
                    $extra_slh_info['eid'] = $extra_consume['teach_eid'];
                    $extra_slh_info['lesson_hours'] = 1;
                    $extra_slh_info['lesson_amount'] = $extra_consume['consume_lesson_amount'];
                    $extra_slh_info['remark'] = safe_str($extra_consume['remark']);
                    $extra_slh_info['extra_consume_did'] = intval($extra_consume['extra_consume_did']);
                    $extra_slh_info['consume_type'] = 1;    //副课时课消
                    $extra_slh_info['source_type'] = 2;     //从钱包扣余额

                    $ca_info = get_ca_info($satt_info['ca_id']);
		    if($ca_info){
                    	$extra_slh_info['cr_id'] = $ca_info['cr_id'];
		    }

                    $result = $mStudentLessonHour->data([])->isUpdate(false)->save($extra_slh_info);

                    if(!$result){
                        $this->rollback();
                        return $this->sql_add_error('student_lesson_hour');
                    }

                    $slh_ids[] = $mStudentLessonHour->slh_id;

                    $total_consume_lesson_amount += $extra_slh_info['lesson_amount'];

                }

                //从钱包扣除余额
                $m_student = Student::get($sid);
                $remark = sprintf("课消金额:%s(%s %s~%s)",$total_consume_lesson_amount,$satt_info['int_day'],$satt_info['int_start_hour'],$satt_info['int_end_hour']);

                $result = $m_student->consumeMoney($total_consume_lesson_amount,$remark,StudentMoneyHistory::BUSINESS_TYPE_ATTENDANCE);

                if(!$result){
                    $this->rollback();
                    return $this->user_error($m_student->getError());
                }


                //
            }else{
                //更新学员课时消耗记录
                foreach($slh_list as $slh){
                    $slh_ids[] = $slh->slh_id;
                }
            }
        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return $slh_ids;
    }
    /**
     * 根据学员考勤记录登记学员课时消耗
     * @param  [type] $consume_lesson_hour [description]
     * @return [type]                      [description]
     */
    public function consumeStudentLessonHour($consume_lesson_hour,$attendance_time,$extra_consume = []){
        $satt_info = $this->getData();
        $sid    = $satt_info['sid'];
        $total_consume_lesson_hour = $consume_lesson_hour;
        $total_consume_lesson_amount = 0;
        $slh_id = 0;
        $slh_ids = [];
        $m_student_lesson_hour = new StudentLessonHour();
        $m_student_lesson = new StudentLesson();

        //根据科目ID获取学员的student_lesson 记录
        $m_sl = $m_student_lesson->getBySattInfo($sid,$satt_info);


        if($m_sl && $m_sl->price_type == 3){
            //如果是按时间收费的不产生课耗
            return $slh_id;
        }

        $w_slh = [];
        $w_slh['change_type'] = 1;
        array_copy($w_slh,$satt_info,['sid','int_day','int_start_hour','int_end_hour']);


        $slh_list = $m_student_lesson_hour->where($w_slh)->select();

        $this->startTrans();

        try{
            if(!$slh_list){
                //创建学员课时消耗记录
                $slh_info = [];
                $slh_info['change_type'] = 1;
                $ca_info = get_ca_info($satt_info['ca_id']);
		if($ca_info){
                	$slh_info['cr_id'] = $ca_info['cr_id'];
		}
                array_copy($slh_info,$satt_info,
                    ['og_id','bid',
                    'sid','lid','sj_id','grade','cid','sl_id',
                    'lesson_type','ca_id','satt_id','catt_id',
                    'int_day','int_start_hour','int_end_hour',
                    'eid','second_eid','is_makeup'
                ]);

                $slh_info['second_eids'] = $satt_info['second_eids'] ? $satt_info['second_eids'] : [];

                $slh_info['lesson_hours']   = $consume_lesson_hour;
                $slh_info['lesson_minutes'] = cacu_minutes($satt_info['int_start_hour'],$satt_info['int_end_hour']);

                $one_lesson_hour_price = 0.00;
                if(!$m_sl){
                    $slh_info['sl_id'] = 0;
                    $slh_info['is_pay']= 0;
                    $one_lesson_hour_price     = $this->getPerLessonHourPrice();
                    $slh_info['lesson_amount'] = $consume_lesson_hour * $one_lesson_hour_price;
                }else{
                    $slh_info['sl_id'] = $m_sl->sl_id;
                    $slh_info['is_pay'] = 1;

                    $slh_info['lesson_amount'] = $m_sl->getConsumeLessonAmount($consume_lesson_hour);
                    if($m_sl->is_present){
                        $slh_info['is_present'] = 1;
                    }
                    if($slh_info['lesson_amount'] == 0 && !$m_sl->is_present && !$m_sl->is_found_oi){       //如果没有找到对应的订单条目并且不是赠送的，且课耗金额为0，那么按照预先设定的课耗金额
                        $one_lesson_hour_price = $this->getPerLessonHourPrice([], $m_sl->sl_id);
                        $slh_info['lesson_amount'] = $consume_lesson_hour * $one_lesson_hour_price;
                    }

                }
                
                // 登记学员课耗时添加学员导师ID
                if($slh_info['lesson_type']==0){
                    $class_info = get_class_info($slh_info['cid']);
                    $slh_info['edu_eid'] = $class_info['edu_eid'];
                }elseif($slh_info['lesson_type']==1 || $slh_info['lesson_type']==2){
                    $es_info = m('employee_student')->where('sid',$sid)->find();
                    $slh_info['edu_eid'] = $es_info['eid'];
                }

                $result = $m_student_lesson_hour->data([])->isUpdate(false)->save($slh_info);

                if(!$result){
                    $this->rollback();
                    return $this->sql_add_error('student_lesson_hour');
                }

                $total_consume_lesson_amount += $slh_info['lesson_amount'];

                $slh_ids[] = $m_student_lesson_hour->slh_id;

                //额外课消
                if(!empty($extra_consume) && !empty($extra_consume['lesson_hours'])){
                    $extra_slh_info = $slh_info;
                    $extra_slh_info['is_extra_consume'] = 1;
                    $extra_slh_info['second_eid'] = 0;
                    $extra_slh_info['second_eids'] = '';
                    $extra_slh_info['edu_eid'] = 0;
                    $extra_slh_info['eid'] = $extra_consume['teach_eid'];
                    $extra_slh_info['lesson_hours'] = $extra_consume['lesson_hours'];
                    $extra_slh_info['remark'] = safe_str($extra_consume['remark']);
                    $extra_slh_info['extra_consume_did'] = intval($extra_consume['extra_consume_did']);
                    $extra_slh_info['consume_type'] = 1;    //副课时课消
                    if(!$m_sl){
                        $extra_slh_info['lesson_amount'] = $extra_consume['lesson_hours'] * $one_lesson_hour_price;
                    }else{
                        $extra_slh_info['lesson_amount'] = $m_sl->getConsumeLessonAmount($extra_consume['lesson_hours']);
                        if($m_sl->is_present){
                            $extra_slh_info['is_present'] = 1;
                        }
                        if($extra_slh_info['lesson_amount'] == 0 && !$m_sl->is_present && !$m_sl->is_found_oi){       //如果没有找到对应的订单条目并且不是赠送的，且课耗金额为0，那么按照预先设定的课耗金额
                            $one_lesson_hour_price = $this->getPerLessonHourPrice([], $m_sl->sl_id);
                            $extra_slh_info['lesson_amount'] = $extra_consume['lesson_hours'] * $one_lesson_hour_price;
                        }
                    }

                    $result = $m_student_lesson_hour->data([])->isUpdate(false)->save($extra_slh_info);

                    if(!$result){
                        $this->rollback();
                        return $this->sql_add_error('student_lesson_hour');
                    }

                    $slh_ids[] = $m_student_lesson_hour->slh_id;

                    $total_consume_lesson_hour   += $extra_slh_info['lesson_hours'];
                    $total_consume_lesson_amount += $extra_slh_info['lesson_amount'];

                }

                //如果存在剩余课时那么扣除课时
                if($m_sl){
                    $m_sl->reduceLessonHour($total_consume_lesson_hour,$attendance_time,$total_consume_lesson_amount);
                }

            }else{
                //更新学员课时消耗记录
                foreach($slh_list as $slh){
                    $slh_ids[] = $slh->slh_id;
                }
            }
        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return $slh_ids;
    }

    /**
     * 根据学员考勤记录获得1个课时的课耗单价
     * @param  [type] $satt_info [description]
     * @return [type]            [description]
     */
    public function getPerLessonHourPrice($satt_info = [], $sl_id = 0){
        if(empty($satt_info)){
            $satt_info = $this->getData();
        }
        $price = 0.00;

        if($sl_id > 0) {
            $price = (new StudentLesson())->getUnitLessonHourAmount($sl_id);
            if($price > 0) return $price;
        }

        if($satt_info['cid'] > 0){
            $w_class['cid'] = $satt_info['cid'];
            $class_info = $this->m_classes->where($w_class)->cache(1)->find();
            if($class_info && $class_info['unit_price'] > 0){
                $price = $class_info['unit_price'];
            }
        }

        if($price == 0.00 && $satt_info['lid'] > 0){
            $w_lesson['lid'] = $satt_info['lid'];
            $m_lesson = $this->m_lesson->where($w_lesson)->cache(1)->find();
            if($m_lesson){
                $price = $m_lesson->per_lesson_hour_price;
            }
        }


        if($price == 0.00 && isset($satt_info['sg_id']) && $satt_info['sg_id'] > 0){
            $w_sg['sg_id'] = $satt_info['sg_id'];
            $m_subject_grade = $this->m_subject_grade->where($w_sg)->cache(1)->find();
            if($m_subject_grade && $m_subject_grade['unit_price'] > 0){
                $price = $m_subject_grade->unit_price;
            }
        }

        if($price == 0.00 && $satt_info['sj_id'] > 0){
            $w_sj['sj_id'] = $satt_info['sj_id'];
            $m_subject = $this->m_subject->where($w_sj)->cache(1)->find();
            if($m_subject && $m_subject['unit_price'] > 0){
                $price = $m_subject->unit_price;
            }
        }

        if($price == 0.00){
            $price = user_config('params.per_lesson_hour_price');
        }

        return $price;
    }

    /**
     * 添加或更新补课记录
     * @param array $satt [description]
     */
    public function addOrUpdateMakeupArrange($satt = []){
        if(empty($satt)){
            $satt = $this->getData();
        }
        $m_makeup_arrange = new MakeupArrange();
        $w_ma = [];
        array_copy($w_ma,$satt,['sid','int_day','int_start_hour','int_end_hour']);
        $this->startTrans();
        try {
            $m_ma = $m_makeup_arrange->where($w_ma)->find();

            if ($m_ma) {
                $update_ma['satt_id'] = $satt['satt_id'];
                $update_ma['catt_id'] = $satt['catt_id'];
                array_copy($update_ma, $satt, ['lid', 'sj_id','grade', 'sg_id', 'ca_id', 'cid', 'eid', 'second_eid']);

                $w_ma_update['ma_id'] = $m_ma['ma_id'];

                $result = $m_makeup_arrange->save($update_ma, $w_ma_update);

                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('makeup_arrange');
                }

                $sa_id = $m_ma->sa_id;

                if($sa_id > 0) {
                    $m_student_absence = new StudentAbsence();
                    $w_sa['sa_id'] = $m_ma->sa_id;

                    $update_sa['status'] = 2;

                    $result = $m_student_absence->save($update_sa, $w_sa);

                    if(false === $result){
                        $this->rollback();
                        return $this->sql_save_error('student_absence');
                    }

                }

            } else {
                $ma_info = [];
                array_copy($ma_info, $satt, ['og_id', 'bid', 'sid', 'lid', 'sj_id', 'grade','sg_id', 'cid', 'ca_id', 'eid', 'second_eid', 'int_day', 'int_start_hour', 'int_end_hour', 'catt_id', 'satt_id']);

                $ma_info['makeup_type'] = 2;

                $result = $this->m_makeup_arrange->isUpdate(false)->save($ma_info);

                if (!$result) {
                    $this->rollback();
                    return $this->sql_add_error('makeup_arrange');
                }
            }
        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    /**
     * 取消缺课记录
     * @param  array  $satt [description]
     * @return [type]       [description]
     */
    public function cancelAbsenceRecord($satt = []){
        if(empty($satt)){
            $satt = $this->getData();
        }

        $w_sa = [];
        array_copy($w_sa,$satt,['sid','int_day','int_start_hour','int_end_hour']);

        $m_sa = $this->m_student_absence->where($w_sa)->find();

        if($m_sa){
            $result = $m_sa->delete(true);
            if(false === $result){
                return $this->sql_delete_error('student_absence');
            }
        }

        return true;
    }

    /**
     * 添加或更新缺课记录
     * @param array $satt [description]
     */
    public function addOrUpdateAbsenceRecord($satt = []){
         if(empty($satt)){
            $satt = $this->getData();
        }

        $w_sa = [];
        array_copy($w_sa,$satt,['sid','int_day','int_start_hour','int_end_hour']);

        //先查找是否有请假记录
        $w_slv = $w_sa;
        $m_slv = $this->m_student_leave->where($w_slv)->find();


        $sa_info = [];
        if($m_slv){
            $sa_info['slv_id']   = $m_slv->slv_id;
            $sa_info['is_leave'] = 1;
        }else{
            $sa_info['is_leave'] = $satt['is_leave'];
        }

        $m_sa = $this->m_student_absence->where($w_sa)->find();

        if(!$m_sa){

            array_copy($sa_info,$satt,['og_id','bid','sid',
                'lid','chapter_index',
                'sj_id','grade','sg_id','cid',
                'lesson_type','ca_id','catt_id','satt_id',
                'is_consume','consume_lesson_hour',
                'eid','second_eid','int_day','int_start_hour','int_end_hour','remark']);


            $result = $this->m_student_absence->data([])->isUpdate(false)->save($sa_info);

            if(!$result){
                return $this->sql_add_error('student_absence');
            }

            //缺勤扣积分
            $hook_data = [
                'hook_action' => 'absence',
                'sid' => $satt['sid'],
            ];
            Hook::listen('handle_credit', $hook_data);

        }else{
            $update_sa = [];

            array_copy($update_sa,$satt,['ca_id','catt_id','satt_id','sj_id','grade']);

            $update_sa = array_merge($update_sa,$sa_info);

            $w_sa_update['sa_id'] = $m_sa->sa_id;
            $result = $this->m_student_absence->save($update_sa,$w_sa_update);

            if(false === $result){
                return $this->sql_save_error('student_absence');
            }
        }

        return true;
    }
    

    /**
     * 自由登记考勤
     * @param  array  $data [description]
     * @return [type]       [description]
     */
    public function freeRegAttendance(array $input)
    {
        $input_int_day = format_int_day($input['int_day']);
        $now_int_day = int_day(time());

        if($input_int_day > $now_int_day){
            return $this->user_error('不能对未来的上课日期进行考勤登记!');
        }
        
        $lesson_type = intval($input['lesson_type']);

        if($lesson_type == 0){
            $w_catt['cid'] = $input['cid'];
        }else{
            if(!isset($input['sj_id']) || !$input['sj_id']){
                return $this->user_error('请选择上课的科目!');
            }
            
            $w_catt['eid'] = $input['teach_eid'];
        }
        $w_catt['lesson_type'] = $lesson_type;

        array_copy($w_catt,$input,['int_day','int_start_hour','int_end_hour']);

        $m_catt = $this->m_class_attendance->where($w_catt)->find();

        $students = $input['students'];

        $this->startTrans();

        try
        {
            if(!$m_catt){
                $m_catt = $this->m_class_attendance->createCattByFreeReg($input);
            }

            //循环处理正常考勤学员
            $catt_info = $m_catt->getData();

            foreach($students as $s){
                $result = $this->m_student_attendance->regSAttByCatt($s,$catt_info,$input);

                if(!$result){
                    exception($this->m_student_attendance->getError());
                }
            }

            //处理完学员考勤登记以后更新班级考勤记录
            $result = $m_catt->updateCattCountFields();

            if(!$result){
                exceptiion($m_catt->getError());
            }


        }catch(Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;
    }

    public function checkDelParamsPermit($satt_id = 0){
        $satt_info = $this->init_satt_info($satt_id);
        if(!$satt_info){
            return false;
        }

        $now_int_day = int_day(time());

        if($satt_info['int_day'] < $now_int_day){
            $catt_params = user_config('params.class_attendance');
            if($catt_params['allow_del_history'] === 0 ){
                return $this->user_error('系统设置为不允许撤销历史考勤!');
            }
            if($catt_params['allow_del_history'] === 1){

                if($catt_params['del_history_pass_days'] > 0) {
                    $days = int_day_diff($satt_info['int_day'], $now_int_day);
                    if ($days > $catt_params['del_history_pass_days']) {
                        $msg = sprintf('系统设置为允许撤销考勤的天数为%s天,当前考勤已过%s天', $catt_params['del_history_pass_days'], $days);
                        return $this->user_error($msg);
                    }
                }elseif($catt_params['del_history_pass_months'] > 0){
                    $months = int_month_diff($satt_info['int_day'],$now_int_day);
                    if($months >= $catt_params['reg_history_pass_months']){
                        $msg = sprintf('系统设置为允许撤考勤的月数为%s个月内,当前考勤已过%s个月',$catt_params['reg_history_pass_months'],$months);
                        return $this->user_error($msg);
                    }
                }
            }
        }
        return true;
    }

    /**
     * @desc  打印票据
     */
    public function do_print($satt_id) {

        if (empty($satt_id) || $satt_id == '') {
            return $this->user_error('考勤记录ID');
        }

        $sad = $this->get($satt_id);
        if (empty($sad)) {
            return $this->user_error('考勤记录不存在');
        }

        $sys_data = $this->getSysData($sad);
        $bs_data = $this->getBsData($sad);
//        $bm_data = $this->getBmData($sad);

        $diy = get_print_vars($sad['bid']);

        $print_data = [
            'diy'   => $diy,
            'sys'	=> $sys_data,
            'bs'	=> $bs_data,
//            'bm'	=> $bm_data,
        ];

        return $print_data;
    }

    //票据打印数据
    protected function getSysData(StudentAttendance $sad)
    {
        $org_name = '';
        $branch = Branch::get(['bid' => $sad->bid]);
        return ['org_name' => $org_name, 'branch_name' => $branch->branch_name];
    }

    //票据打印数据
    protected function getBsData(StudentAttendance $sad)
    {
        $bs_data = [];

        $student = Student::get(['sid' => $sad->sid]);
        $course = CourseArrange::get(['ca_id' => $sad->ca_id]);
        $subject = (new Subject())->where('sj_id', $course['sj_id'])->field('subject_name')->find();
        $lesson = (new Lesson())->where('lid', $course['lid'])->field('lesson_name')->find();
        $class = (new Classes())->where('cid', $sad->cid)->field('cr_id,class_name,teach_eid,second_eid')->find();
        $user_t = (new Employee())->where('eid', $sad->eid)->field('ename')->find();
        $user_e = (new Employee())->where('eid', $sad->second_eid)->field('ename')->find();

        $bs_data['sid']  = $sad->sid;
        $bs_data['student_name'] = $student->student_name;
        $bs_data['card_no'] = $student->card_no;
        $bs_data['sno'] = $student->sno;
        $bs_data['first_tel'] = $student->first_tel;
        $bs_data['remain_lesson_hours'] = $student->student_lesson_remain_hours;
        $bs_data['consume_lesson_hours'] = $sad->consume_lesson_hour;

        $bs_data['lesson_name'] = $lesson['lesson_name'];
        $bs_data['subject_name'] = $subject['subject_name'];
        $bs_data['teacher_name'] = $user_t['ename'];
        $bs_data['second_teacher_name'] = $user_e['ename'];
        $class_room = (new Classroom())->where('cr_id', $class['cr_id'])->field('room_name')->find();
        $bs_data['room_name'] = $class_room['room_name'];
        $bs_data['class_name'] = $class['class_name'];
        $int_day = int_day_to_date_str($course['int_day']);
        $int_start_hour = int_hour_to_hour_str($course['int_start_hour']);
        $int_end_hour = int_hour_to_hour_str($course['int_end_hour']);
        $bs_data['lesson_time'] = $int_day.' '.$int_start_hour.'-'.$int_end_hour;

        return $bs_data;
    }

//    //票据打印数据
    protected function getBmData(StudentAttendance $sad)
    {
        $bm_data = [];

        $course = CourseArrange::get(['ca_id' => $sad->ca_id]);
        $subject = (new Subject())->where('sj_id', $course['sj_id'])->field('subject_name')->find();
        $lesson = (new Lesson())->where('lid', $course['lid'])->field('lesson_name')->find();
        $class = (new Classes())->where('cid', $sad->cid)->field('cr_id,class_name,teach_eid,second_eid')->find();
        $user_t = (new Employee())->where('eid', $sad->eid)->field('ename')->find();
        $user_e = (new Employee())->where('eid', $sad->second_eid)->field('ename')->find();

        $bm_data['lesson_name'] = $lesson['lesson_name'];
        $bm_data['subject_name'] = $subject['subject_name'];
        $bm_data['teacher_name'] = $user_t['ename'];
        $bm_data['second_teacher_name'] = $user_e['ename'];
        $class_room = (new Classroom())->where('cr_id', $class['cr_id'])->field('room_name')->find();
        $bm_data['room_name'] = $class_room['room_name'];
        $bm_data['class_name'] = $class['class_name'];

        $int_day = int_day_to_date_str($course['int_day']);
        $int_start_hour = int_hour_to_hour_str($course['int_start_hour']);
        $int_end_hour = int_hour_to_hour_str($course['int_end_hour']);

        $bm_data['lesson_time'] = $int_day.' '.$int_start_hour.'-'.$int_end_hour;

        return $bm_data;
    }

}