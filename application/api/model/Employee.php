<?php
/**
 * Created by PhpStorm.
 * User: win10
 * Date: 2017/6/19
 * Time: 19:11
 */
namespace app\api\model;

use app\common\exception\FailResult;
use Overtrue\Pinyin\Pinyin;
use think\Exception;
use think\Db;

class Employee extends Base
{
    protected $type = [
        'birth_time' => 'timestamp',
        'option_fields'=>'json'
    ];
    protected $autoWriteTimestamp = true;

    protected $auto = ['birth_year', 'birth_month', 'birth_day', 'pinyin', 'pinyin_abbr'];
    protected $hidden = ['create_time', 'create_uid', 'update_time', 'is_delete', 'delete_time', 'delete_uid'];

    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        /*给一个员工默认创建一条profile记录*/
        Employee::event('after_insert', function ($employee) {
            $data['create_time'] = time();
            $employee->profile()->save($data);
        });
    }

    protected function setPinyinAttr($value, $data)
    {
        if (!empty($data['ename'])) {
            $temp = (new Pinyin())->name($data['ename']);
            return join('', $temp);
        }
        return '';
    }

    protected function setPinyinAbbrAttr($value, $data)
    {
        if (!empty($data['ename'])) {
            $temp = (new Pinyin())->abbr($data['ename']);
            return $temp;
        }
        return '';
    }

    public function setBirthYearAttr($value, $data)
    {
        if(isset($data['birth_time']) && $data['birth_time']){
            if(is_string($data['birth_time'])) $data['birth_time'] = strtotime($data['birth_time']);
            return date('Y', $data['birth_time']);
        }
        return 0;
        
    }

    public function setBirthMonthAttr($value, $data)
    {
        if(isset($data['birth_time']) && $data['birth_time']){
            if(is_string($data['birth_time'])) $data['birth_time'] = strtotime($data['birth_time']);
            return date('n', $data['birth_time']);
        }
        return 0;
    }

    public function setBirthDayAttr($value, $data)
    {
        if(isset($data['birth_time']) && $data['birth_time']){
            if(is_string($data['birth_time'])) $data['birth_time'] = strtotime($data['birth_time']);
            return date('j', $data['birth_time']);
        }
        return 0;
    }

    public function setBirthTimeAttr($value,$data){
        if(empty($value)){
            return 0;
        }
        return strtotime($value);
    }

    public function setRidsAttr($value, $data)
    {
        if (is_array($value)) {
            return join(',', $value);
        }
        return $value;
    }

    public function setJoinIntDayAttr($value)
    {
        return $value ? format_int_day($value) : $value;
    }

    public function setOfficialIntDayAttr($value)
    {
        return $value ? format_int_day($value) : $value;
    }

    public function setBidsAttr($value, $data)
    {
        if (is_array($value)) {
            return join(',', $value);
        }
        return $value;
    }

    public function setComIdsAttr($value, $data)
    {
        if (is_array($value)) {
            return join(',', $value);
        }
        return $value;
    }

    public function setLidsAttr($value, $data)
    {
        if (is_array($value)) {
            return join(',', $value);
        }
        return $value;
    }

    public function setSjIdsAttr($value)
    {
        is_array($value) && $value = implode(',', $value);
        return $value;
    }

    public function getBidsAttr($value, $data)
    {
        $bids = split_int_array($value);
        if(isset($data['com_ids']) && !empty($data['com_ids'])){
            $com_bids = $this->getCompanyBids($data['com_ids']);
            $bids = array_values(array_unique(array_merge($bids,$com_bids)));
        }
        return $bids;
    }

    public function getComIdsAttr($value,$data)
    {
        return split_int_array($value);
    }


    public function getDptIdsAttr($value,$data){
        $ret        = [];
        $m_ed       = model('employee_dept');
        $w_ed['eid'] = $data['eid'];
        $ed_list    = $m_ed->where($w_ed)->select();
        if($ed_list){
            foreach($ed_list as $ed){
                if(!in_array($ed['dpt_id'],$ret)){
                    array_push($ret,$ed['dpt_id']);
                }
            }
        }
        return $ret;
    }

    public function getOpenIdAttr($value, $data)
    {
        if(empty($data['uid'])) return '';
        $m_user = m('User');
        return $m_user->where('uid', $data['uid'])->cache(2)->value('openid', '');
    }

    public function getBirthTimeAttr($value) {
        return $value ? date('Y-m-d', $value) : $value;
    }

    public function getRidsAttr($value, $data)
    {
        return split_int_array($value);
    }

    public function getLidsAttr($value, $data)
    {
        return split_int_array($value);
    }

    public function getSjIdsAttr($value, $data)
    {
        return split_int_array($value);
    }

    public function branches()
    {
        return $this->belongsToMany('Branch', 'branch_employee', 'bid', 'eid');
    }

    public function departments()
    {
        return $this->belongsToMany('Department', 'employee_dept', 'dpt_id', 'eid');
    }

    public function roles()
    {
        return $this->belongsToMany('Role', 'employee_role', 'rid', 'eid');
    }

    public function subjects()
    {
        return $this->belongsToMany('Subject', 'employee_subject', 'sj_id', 'eid');
    }

    public function user()
    {
        return $this->belongsTo('User', 'uid', 'uid');
    }

    public function profile()
    {
        return $this->hasOne('EmployeeProfile', 'eid', 'eid');
    }

    public function getCompanyBids($com_ids){
        $bids = [];
        if(is_string($com_ids)){
            $com_ids = split_int_arraY($com_ids);
        }
        foreach($com_ids as $com_id){
            $com_bids = get_bids_by_dpt_id($com_id);
            $bids = array_merge($bids,$com_bids);
        }
        return $bids;
    }

    public function removeUser()
    {
        $data['uid'] = 0;
        $data['account'] = '';
        $data['user_status'] = 0;
        $result = $this->save($data);
        if ($result === false) {
            return false;
        }
        return true;
    }

    /**
     * 创建员工
     * @param  array &$input 员工信息
     * @param  boolean $openAccount 是否同时开通账号
     * @param boolena $validate 是否验证
     * @param boolean check_limit 是否检查限制
     * @return boolean     成功true,失败false
     */
    public function createEmployee($input, $openAccount = false,$validate = true,$check_limit = true){
        $this->startTrans();
        try {
            $common_fields = ['mobile','email'];
            foreach($common_fields as $f){
                if(isset($input['employee'][$f]) && !empty($input['employee'][$f])){
                    $input['user'][$f] = $input['employee'][$f];
                }
            }

            if(!isset($input['employee']['bid'])){
                if(isset($input['employee']['bids'])){
                    if(is_array($input['employee']['bids'])) {
                        $input['employee']['bid'] = $input['employee']['bids'][0];
                    }else{
                        $bids = explode(',',$input['employee']['bids']);
                        $input['employee']['bid'] = intval($bids[0]);
                    }
                }else{
                    $input['employee']['bid'] = 0;
                }
            }

            if($validate){
                $this->validate('\app\common\validate\Employee');
            }

            $result = $this->allowField(true)->save($input['employee']);
            if (!$result) {
                $this->rollback();
                return false;
            }

            $bids = $input['employee']['bids'];
            $bids = is_array($bids) ? $bids : explode(',', $bids);
            if(!empty($bids)) {
                $this->branches()->saveAll($bids);
            }

            $rids = $input['employee']['rids'];
            $rids = is_array($rids) ? $rids : explode(',', $rids);
            if(!empty($rids)) {
                $this->roles()->saveAll($rids);
            }
            //if (count($bids) == 0 || count($rids) == 0) {
                //throw new \Exception('员工的校区和角色不能为空');
            //}

            if(isset($input['employee']['sj_ids']) && !empty($input['employee']['sj_ids'])){
                $sj_ids = isset($input['employee']['sj_ids']) ? $input['employee']['sj_ids'] : [];
                $sj_ids = is_array($sj_ids) ? $sj_ids : explode(',', $sj_ids);

                $this->subjects()->saveAll($sj_ids);
            }

            if (isset($input['employee']['profile']) && !empty($input['employee']['profile']) && $profile = array_filter($input['employee']['profile'])) {
                $this->profile()->save($profile);
            }

            //添加员工部门、职位信息
            if(isset($input['employee']['departments']) && !empty($input['employee']['departments'])) {
                foreach($input['employee']['departments'] as $department) {
                    $rs = $this->connectDepartment($department);
                    if(!$rs) exception('添加部门信息失败');
                }
            }

            //创建员工账号
            if ($openAccount) {
                if (empty($input['user'])) {
                    $this->rollback();
                    $this->error = '开通账号缺少参数';
                    return false;
                }
                $input['user']['sex']  = $input['employee']['sex'];
                $input['user']['name'] = $input['employee']['ename'];

                $m_user = new \app\api\model\User();

                if (empty($input['from_dss'])) {
                    $uid = $m_user->createEmployeeAccount($input['user'],$check_limit);
                } else {

                    $uid = $m_user->createEmployeeAccountFromDss($input);
                }

                if(!$uid){
                    $this->rollback();
                    $this->user_error($m_user->getError());
                    return false;
                }
                $this->data('uid', $uid);
                $this->data('user_status', isset($input['AllowedLogin']) ? $input['AllowedLogin'] : 1);
                $this->data('account', $m_user->account);

                $result = $this->isUpdate(true)->save();
                if(!$result){
                    $this->rollback();
                    return false;
                }
            }
        } catch (\Exception $e) {
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }

        $this->commit();
        return true;
    }

    //员工关联部门信息
    public function connectDepartment($data) {
        $department_info = Department::get(['dpt_id' => $data['dpt_id']]);

        $additional_data = [
            'jobtitle_did' => isset($data['jobtitle_did']) ? $data['jobtitle_did'] : 0,
            'dpt_type' => $department_info->dpt_type,
            'bid' => $department_info->bid,
            'og_id' => $department_info->og_id
        ];

        if(isset($data['is_charge'])){
            $additional_data['is_charge'] = intval($data['is_charge']);
        }

        $rs = $this->departments()->save($department_info, $additional_data);
        return $rs;
    }

    /**
     * 编辑员工信息
     * @param  [type] $eid    [description]
     * @param  [type] &$input [description]
     * @return [type]         [description]
     */
    public function editEmployee($eid, &$input){
        /** @var Employee $employee */
        $employee = $this->find($eid);
        if(!$employee){
            $this->error = '员工信息不存在,或已经被删除!';
            return false;
        }

        $employee_info = $employee->toArray();
        $old_bids = $employee_info['bids'];
        $old_rids = $employee_info['rids'];
        $old_sj_ids = $employee->subjects()->alias('subject')->column('subject.sj_id');
        $old_sj_ids = $old_sj_ids ? $old_sj_ids : [];

        $new_bids = isset($input['bids']) ? $input['bids'] : $old_bids;
        $new_rids = isset($input['rids']) ? $input['rids'] : $old_sj_ids;
        $new_sj_ids = isset($input['sj_ids']) ? $input['sj_ids'] : $old_sj_ids;

        //$allow_update_fields = ['ename','nick_name','birth_time','birth_year','birth_monty','birth_day','sex','mobile','email','bids','rids'];
        $update_user_fields  = ['mobile','email'];

        $del_bids = array_diff($old_bids,$new_bids);
        $add_bids = array_diff($new_bids,$old_bids);

        $del_rids = array_diff($old_rids,$new_rids);
        $add_rids = array_diff($new_rids,$old_rids);

        $del_sj_ids = array_diff($old_sj_ids, $new_sj_ids);
        $add_sj_ids = array_diff($new_sj_ids, $old_sj_ids);

        $this->startTrans();
        try {
            //更新员工信息
            $profile =  isset($input['profile']) ? array_filter($input['profile']) : null;
            unset($input['profile']);
            $result = $this->allowField(true)->save($input, ['eid' => $eid]);
            if (!empty($profile)) {
                $origin_profile = EmployeeProfile::get(['eid' => $eid]);
                if (!empty($origin_profile)) {
                    $origin_profile->save($profile);
                } else {
                    $this->profile()->save($profile);
                }
            }
            if ($result === 0) {
                $this->commit();
                return [
                    'affect_rows' => 0
                ];
            }
            if (!$result) {
                $this->rollback();
                return false;
            }

            //更新用户表
            if($employee_info['uid'] > 0){
                $update_user = [];
                foreach($update_user_fields as $f){
                    if(isset($input[$f]) && $employee_info[$f] != $input[$f]){
                        $update_user[$f] = $input[$f];
                    }
                }

                if(isset($input['ename']) && $employee_info['ename'] != $input['ename']){
                    $update_user['name'] = $input['ename'];
                }

                if(!empty($update_user)){
                    $employee->user->save($update_user);
                }

            }

            //添加校区员工表
            if(!empty($add_bids)){
                $employee->branches()->saveAll($add_bids);
            }

            //删除校区员工表
            if(!empty($del_bids)){
                $employee->branches()->detach($del_bids);
            }

            //添加角色员工表
            if(!empty($add_rids)){
                $employee->roles()->saveAll($add_rids);
            }

            //删除角色员工表
            if(!empty($del_rids)){
                $employee->roles()->detach($del_rids);
            }

            //如果中间表与员工表的角色不相等，重新更新中间表
            $pivot_rids = $employee->roles()->alias('er')->column('er.rid');
            $employee_rids = $this->rids;
            if(is_array($pivot_rids) && is_array($employee_rids) &&
                (array_diff($pivot_rids, $employee_rids) != array_diff($employee_rids, $pivot_rids))){
                $employee->roles()->detach();
                $employee->roles()->saveAll($employee_rids);
            }

            //添加员工科目
            if(!empty($add_sj_ids)){
                $employee->subjects()->saveAll($add_sj_ids);
            }

            //删除员工科目
            if(!empty($del_sj_ids)){
                $employee->subjects()->detach($del_sj_ids);
            }

            //添加员工部门、职位信息
            if(isset($input['departments'])) {
                $this->updateEmployeeDept($employee, $input['departments']);
            }

        } catch (\Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }
        $this->commit();
        return true;
    }

    //更新员工部门
    public function updateEmployeeDept(Employee $employee, $new_dept_list)
    {
        $this->startTrans();
        try {
            $old_dept_list = (collection($employee->departments))->toArray();
            $old_dept_list = array_map(function($dept){
                return array_merge($dept, $dept['pivot']);
            }, $old_dept_list);

            //--1-- 循环以前的员工部门，如果更新时不存在了，则删除
            foreach ($old_dept_list as $per_old) {
                $del = true;
                foreach ($new_dept_list as $per_new) {
                    if ($per_new['dpt_id'] == $per_old['dpt_id'] && $per_new['jobtitle_did'] == $per_old['jobtitle_did']) {
                        $del = false;
                        break;
                    }
                }

                if ($del) {
                    $rs = $this->name('employee_dept')->where('jobtitle_did', $per_old['jobtitle_did'])
                        ->where('eid', $per_old['eid'])->where('dpt_id', $per_old['dpt_id'])->delete(true);
                    if($rs === false) throw new FailResult($this->getErrorMsg());
                }

            }
            //--2-- 循环新的员工部门，对比已有的，如果不存在，则新增
            foreach ($new_dept_list as $per_new) {
                $add = true;
                foreach ($old_dept_list as $per_old) {
                    if ($per_new['dpt_id'] == $per_old['dpt_id']
                        && $per_new['jobtitle_did'] == $per_old['jobtitle_did']
                        && $per_new['is_charge'] == $per_old['is_charge']
                    ) {
                        $add = false;
                    }
                }

                if ($add) {
                    $rs = $this->connectDepartment($per_new);
                    if (!$rs) exception('添加部门信息失败');
                }
            }
            $this->commit();
        } catch (Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }

        return true;
    }

    /**
     * 禁用账号
     * @return [type] [description]
     */
    public function disableAccount() {
        $ret = true;
        if ($this->getData('uid')) {
            $orgUser = $this->getAttr('user');
            $this->startTrans();
            try {
                $this->save(['user_status' => 0]);
                $orgUser->isUpdate(true)->save(['status' => 0]);
                $this->commit();
            } catch (\Exception $e) {
                $this->error = $e->getMessage();
                $this->rollback();
                $ret = false;
            }
        } else {
            $this->error = '该员工还没有账号,或账号已被删除';
            $ret = false;
        }
        return $ret;
    }

    public function activeAccount($input) {
        if ($this->getData('uid')) {
            $orgUser = $this->getAttr('user');
            if (!$orgUser) {
                return $this->user_error('数据一致性出错');
            }
            $this->startTrans();
            try {
                $this->save(['user_status' => 1]);
                $orgUser->save(['status' => 1]);

            } catch (\Exception $e) {
                $this->rollback();
                return $this->exception_error($e);
            }
            $this->commit();
            return true;
        }

        $input['sex'] = $this->getData('sex');
        $input['name'] = $this->getData('ename');
        $input['email'] = $this->getData('email');
        $input['mobile'] = $this->getData('mobile');

        $this->startTrans();
        try {
            $user = new User();
            $result = $user->createEmployeeAccount($input);
            if(!$result){
                $this->rollback();
                return $this->user_error($user->getError());
            }
            $temp = [];
            $temp['uid'] = $user->uid;
            $temp['user_status'] = 1;
            $temp['account'] = $user->account;
            $this->allowField(true)->save($temp);

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    public function deleteEmployee($id) {
        $employee = $this->find($id);
        if (!$employee) {
            $this->error = '该员工不存在或已删除';
            return false;
        }

        $class = Classes::get(['teach_eid' => $id]);
        if(!empty($class)) return $this->user_error('老师有相关班级，无法删除');
        $course = CourseArrange::get(['teach_eid' => $id]);
        if(!empty($course)) return $this->user_error('老师有相关课程，无法删除');

        $this->startTrans();
        try {
            if ($employee->uid > 0) {
                if ($employee->user->is_admin == 1) {
                    throw new \Exception('admin账号不可以删除');
                }
                $employee->user->delete();
            }
            $employee->branches()->detach($employee->bids);
            $employee->roles()->detach($employee->rids);
            $employee->subjects()->detach();
            $employee->delete();
        } catch (\Exception $e) {
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        $this->commit();
        return true;
    }

    //通过eid获取uid
    public static function getUidByEid($eid) {
        $employee = (new self())->where('eid', $eid)->field('uid')->find();
        if(empty($employee)) return 0;

        return $employee->uid;
    }

    //员工批量增加权限
    public function addBatchRole($rid, $eids)
    {
        $this->startTrans();
        try {
            foreach ($eids as $eid) {

                $m_employee = $this->find($eid);
                $rids = $m_employee->rids;

                if(!in_array($rid, $rids)) {
                    array_push($rids, $rid);
                    $rids = implode(',', $rids);
                    $rs = $m_employee->save(['rids' => $rids]);
                    if($rs === false) exception('员工增加权限失败');
                    $is_exist = Db::name('employee_role')->where('eid', $eid)->where('rid', $rid)->find();
                    if(!$is_exist) {
                        $rs = $m_employee->roles()->save($rid);
                        if($rs === false) exception('员工关联权限失败');
                    }
                }

            }
            $this->commit();
        } catch (Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }

        return true;
    }

    /**
     * 获得一个员工所带班级
     * @param int $eid
     * @param bool $with_students
     */
    public function getClasses($eid = 0,$with_students = false,$include_end = false){
        if($eid == 0){
            $uid = gvar('uid');
            if($uid == 0){
                $eid = 0;
            }else{
                $eid = User::getEidByUid($uid);
            }
        }
        $ret = [];
        if($eid == 0){
            return [];
        }
        $w_class = [];
        $w_class['teach_eid|second_eid|edu_eid'] = $eid;
        if(!$include_end){
            $w_class['status'] = ['LT',2];
        }
        $class_list = get_table_list('class',$w_class);
        if(!$class_list){
            return $ret;
        }
        foreach($class_list as $cls){
            $students = [];
            if($with_students){

                $w_cs = [];
                $w_cs['cid'] = $cls['cid'];
                $w_cs['status'] = ['LT',2];
                $cs_list = get_table_list('class_student',$w_cs);

                if($cs_list){
                    foreach($cs_list as $cs){
                        $sinfo = get_student_info($cs['sid']);
                        array_push($students,array_merge($sinfo,$cs));
                    }
                }
            }
            $cls['students'] = $students;
            array_push($ret,$cls);
        }
        return $ret;
    }



    public function getOnlyClasses($eid = 0){
        if($eid == 0){
            $uid = gvar('uid');
            if($uid == 0){
                $eid = 0;
            }else{
                $eid = User::getEidByUid($uid);
            }
        }
        $ret = [];
        if($eid == 0){
            return [];
        }
        $w_class = [];
        $w_class['teach_eid|second_eid|edu_eid'] = $eid;

        $cids = (new Classes)->where($w_class)->column('cid');
        $ret = array_unique($cids);

        return $ret;
    }

}