<?php
/**
 * Created by PhpStorm.
 * User: win10
 * Date: 2017/8/4
 * Time: 16:44
 */
namespace app\api\model;

class ListenApply extends Base
{
    protected $name = 'class_listen_apply';

    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function cls()
    {
        return $this->belongsTo('Classes', 'cid', 'cid');
    }

    public function courseArrange()
    {
        return $this->belongsTo('CourseArrange', 'ca_id', 'ca_id');
    }

    public function student()
    {
        return $this->belongsTo('Student', 'sid', 'sid');
    }

    public function user()
    {
        //todo  field()
        return $this->belongsTo('User', 'uid', 'uid');
    }

    public function hasOneReview()
    {
        return $this->hasOne('Review', 'cla_id', 'cla_id')->where('review_type', 3);
    }

    public function addListenApply($data)
    {
        $course_arrange = m('course_arrange')->find($data['ca_id']);
        $data['cid'] = $course_arrange->cid;
        $data['bid'] = $course_arrange->bid;
        $this->allowField(true)->save($data);
        $course_arrange->setInc('listen_apply_nums');
        return true;
    }

    public function approve($cla_id, $input)
    {
        if (!isset($input['is_approve'])) {
            $this->error = '缺少参数';
            return false;
        }
        if (!$input['is_approve'] && empty($input['reject_reason'])) {
            $this->error = '拒绝理由不能为空';
            return false;
        }
        $record = $this->find($cla_id);
        $record->is_approve = $input['is_approve'];
        $record->approve_time = time();
        if (!empty($input['reject_reason'])) {
            $record->reject_reason = $input['reject_reason'];
        }
        $record->course_arrange->setInc('listen_approve_nums');
        return $record->save();
    }

    public function arrive()
    {
        $this->is_arrive = 1;
        $this->arrive_time = request()->time();
        $this->course_arrange->setInc('listen_arrive_nums');
        return $this->save();
    }

    public function review()
    {
        $this->is_review = 1;
        $this->review_time = request()->time();
        return $this->save();
    }

    public function cancel()
    {
        if (!$this->canBeCanceled()) {
            return false;
        }
        $this->delete();
        $this->course_arrange->setDec('listen_apply_nums');
        if ($this->getData('is_approve')) {
            $this->course_arrange->setDec('listen_approve_nums');
        }
        return true;
    }

    public function canBeCanceled()
    {
        if ($this->course_arrange['is_attendance']) {
            $this->error = '该课程已结束，禁止进行该操作';
            return false;
        }
        return true;
    }

    public function getUpcomingListenApply($sid)
    {
        $where['sid'] = $sid;
        $int_day = date('Ymd', time());
        $list = $this->where($where)->with(['course_arrange' => function ($query) use ($int_day) {
            $query->where('int_day', '>=', $int_day);
        }])->select();
        $record = null;
        $temp = 0;
        foreach ($list as $key => $item) {
            if (empty($item['course_arrange'])) {
                continue;
            }
            if ($temp == 0) {
                $temp = $item['course_arrange']['int_day'];
                $record = $item;
                continue;
            }
            if ($temp > $item['course_arrange']['int_day']) {
                $temp = $item['course_arrange']['int_day'];
                $record = $item;
            }
        }
        if (empty($record)) {
            return [];
        }
        $cla_id = $record['cla_id'];
        $with = ['cls','student'];
        $with['course_arrange'] = ['branch', 'classroom', 'lesson' => function ($query) {
            $query->field('lid,lesson_name');
        }];
        $data = self::get($cla_id, $with);
        return $data;
    }


}