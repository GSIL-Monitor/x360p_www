<?php
/**
 * Created by PhpStorm.
 * User: win10
 * Date: 2017/6/21
 * Time: 16:49
 */

namespace app\api\model;

use app\common\exception\FailResult;
use think\Db;
use think\Exception;

class Classes extends Base
{
    public static $detail_fields = [
        ['type' => 'index', 'width' => 60, 'align' => 'center'],
        ['title' => '校区', 'key' => 'bid', 'align' => 'center'],
        ['title' => '班级名称', 'key' => 'class_name', 'align' => 'center'],
        ['title' => '班级类型', 'key' => 'class_type', 'align' => 'center'],
        ['title' => '上课老师', 'key' => 'teach_eid', 'align' => 'center'],
        ['title' => '预招人数', 'key' => 'plan_student_nums', 'align' => 'center'],
        ['title' => '学员人数', 'key' => 'student_nums', 'align' => 'center'],
    ];

    const STATUS_ING = 1; # 已开课
    const STATUS_CLOSE = 2; # 已结课

    const CLASS_TYPE_NORMAL = 0; # 标准班级类型
    const CLASS_TYPE_TMP = 1; # 临时班级类型
    const CLASS_TYPE_ACTIVITY = 2;  # 活动班级

    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub   
    }

    protected $name = 'class';

    protected $type = [
        'start_lesson_time' => 'timestamp',
        'end_lesson_time' => 'timestamp'
    ];


    public function setLessonTimesAttr($value)
    {
        return is_null($value) ? 0 : $value;
    }

    public function setConsumeLessonHourAttr($value)
    {
        return is_null($value) ? 0 : $value;
    }

    public function setPerLessonHourMinutesAttr($value)
    {
        return is_null($value) ? 0 : $value;
    }

    public function setIntStartHourAttr($value)
    {
        return intval(str_replace(':', '', $value));
    }

    public function setIntEndHourAttr($value)
    {
        return intval(str_replace(':', '', $value));
    }

    public function getIntStartHourAttr($value)
    {
        return $this->transformHour($value);
    }

    public function getIntEndHourAttr($value)
    {
        return $this->transformHour($value);
    }

    public function getStartLessonTimeAttr($value)
    {
        return $value ? date('Y-m-d', $value) : $value;
    }

    public function getEndLessonTimeAttr($value)
    {
        return $value ? date('Y-m-d', $value) : $value;
    }

    protected function transformHour($hour)
    {
        $hour = (string)$hour;
        if (strlen($hour) == 3) {
            $hour = '0' . $hour;
        }
        $temp = str_split($hour, 2);
        return implode(':', $temp);
    }

    public function branch()
    {
        return $this->belongsTo('Branch', 'bid', 'bid');
    }

    public function teacher()
    {
        return $this->belongsTo('Employee', 'teach_eid', 'eid');
    }

    public function assistant()
    {
        return $this->belongsTo('Employee', 'edu_eid', 'eid');
    }

    public function students()
    {
        return $this->belongsToMany('Student', 'ClassStudent', 'sid', 'cid');
    }

    public function hasManyClassStudents()
    {
        return $this->hasMany('ClassStudent', 'cid', 'cid');
    }

    public function classStudents($time)
    {
        $int_day = int_day($time);
        return $this->hasMany('ClassStudent', 'cid', 'cid')->where('in_time', '<=', $int_day)->where(function ($query) use ($int_day) {
            $query->where('out_time', 0)->whereOr('out_time', '<', $int_day);
        })->with(['student']);
    }

    public function courseArranges()
    {
        return $this->hasMany('CourseArrange', 'cid', 'cid');
    }

    public function eduworks()
    {
        return $this->hasMany('EduWorks', 'cid', 'cid');
    }

    public function lesson()
    {
        return $this->belongsTo('Lesson', 'lid', 'lid');
    }

    public function classroom()
    {
        return $this->belongsTo('Classroom', 'cr_id', 'cr_id');
    }

    public function homeworks()
    {
        return $this->hasMany('Homework', 'cid', 'cid');
    }

    public function schedules()
    {
        return $this->hasMany('ClassSchedule', 'cid', 'cid');
    }

    //新的schedule，前端修改的时候保持一致
    public function schedule()
    {
        return $this->hasMany('ClassSchedule', 'cid', 'cid');
    }

    public function checkSidRepeat($sid)
    {
        $where['cid'] = $this->getData('cid');
        $where['sid'] = $sid;
        return m('ClassStudent')->where($where)->count();
    }

    /**
     * 获得排课计划列表
     * @return [type] [description]
     */
    public function getArrangeSchedules()
    {
        $w_cs['cid'] = $this->cid;
        $mClassSchedule = new ClassSchedule();
        $schedules = $mClassSchedule->where($w_cs)->order('week_day asc, int_start_hour asc')->select();
        return $schedules;
    }

    public static function deleteSingleClass($id)
    {
        Db::startTrans();
        try {
            $class = self::get($id);
            if (!$class) {
                return '班级不存在';
            }

            $student = ClassStudent::get(['status' => ClassStudent::STATUS_NORMAL, 'cid' => $id]);
            if (!empty($student)) {
                return '该班级还存在正常状态的学生,不能删除';
            }

            $w_ca['cid'] = $id;
            $w_ca['is_attendance'] = ['GT', 0];

            $mCourseArrange = new CourseArrange();

            $ex_ca = $mCourseArrange->where($w_ca)->find();
            if ($ex_ca) {
                return '该班级已经存在考勤的排课记录,请先撤销考勤!';
            }

            $w_del['cid'] = $id;
            $mCourseArrange->where($w_del)->delete(true);

            $mCas = new CourseArrangeStudent();
            $mCas->where($w_del)->delete(true);


            ClassSchedule::destroy(function ($query) use ($id) {
                $query->where('cid', $id);
            });

            $class->delete();
            $rs = (new ClassStudent())->where('cid', $id)->delete();
            if ($rs === false) throw new FailResult('删除班级学员失败');

            // 添加一条删除班级 操作日志
            ClassLog::addDeleteClassLog($class);

        } catch (\Exception $e) {
            Db::rollback();
            return $e->getMessage();
        }
        Db::commit();
        return true;
    }

    /**
     * 通过课程id得到该课程相关联的班级列表(已自测)  下订单的时候 自助选班
     * @param $lid
     * @param int $status
     * @return false|\PDOStatement|string|\think\Collection
     */
    public static function getClassesByLessonId($lid, $status = 0)
    {
        $where['lid'] = $lid;
        if (isset($status)) {
            $where['status'] = $status;
        }
        $list = self::where($where)
            ->with(['teacher' => function ($query) {
                $query->field('eid,ename');
            }])
            ->with(['assistant' => function ($query) {
                $query->field('eid,ename');
            }])
            ->with(['branch'])
            ->select();

        $branches = [];
        $bids = [];
        foreach ($list as $v) {
            if (in_array($v['bid'], $bids)) {
                continue;
            }
            array_push($bids, $v['bid']);
            $branches[$v['bid']] = $v->branch;
            unset($v->branches);
        }

        unset($v);
        $branches = collection($branches)->toArray();
        foreach ($list as $v) {
            if (!isset($branches[$v['bid']]['new_classes'])) {
                $branches[$v['bid']]['new_classes'] = [];
            }
            $branches[$v['bid']]['new_classes'][] = $v;
        }
        return array_values($branches);
    }

    /*获取班级列表*/
    public static function getClassesOfUser($uid, $sid, $status = null)
    {
        $sids = (isset($sid) && is_numeric($sid)) ? array($sid) : StudentUser::getStudentIds($uid);
        $students = Student::all($sids, ['classes' => ['lesson', 'teacher', 'assistant']]);
        if (empty($students)) {
            return [];
        }
        $class_list = [];
        foreach ($students as $student) {
            $classes = $student['classes'];
            foreach ($classes as $item) {
                $item['sid'] = $student['sid'];
                $item['student_name'] = $student['student_name'];
            }
            if (!empty($item)) {
                array_push($class_list, $item);
            }
        }
        /*0:待开课招生中,1:已开课,2:已结课*/
        $allow_status = [0, 1, 2];
        if (is_null($status) || !in_array($status, $allow_status)) {
            return $class_list;
        } else {
            foreach ($class_list as $key => $item) {
                if ($item->status !== $status) {
                    unset($class_list[$key]);
                }
            }
        }
        return $class_list;
    }

    /*获取一个学生的班级/课程列表*/
    public static function getLessonsOfStudent($sid, $status = null)
    {
        $student = Student::with(['classes' => ['lesson']])->find($sid);
        $classes = $student['classes'];
        foreach ($classes as $key => $clas) {
            if (!is_null($status) && $status !== $clas['status']) {
                unset($classes[$key]);
                continue;
            }
        }
        return array_values($classes);
    }

    public static function getClassDetail($cid)
    {
        $data = self::get($cid, ['lesson.chapters', 'teacher', 'assistant', 'courseArranges', 'classroom']);
        return $data;
    }

    /*获取特定用户的上课时间表列表*/
    public static function getScheduleOfUser($uid, $sid, $cid)
    {
        $sids = (isset($sid) && is_numeric($sid)) ? array($sid) : StudentUser::getStudentIds($uid);
        $list = Student::all($sids, ['classes' => ['lesson.chapters', 'courseArranges', 'classroom']]);
        foreach ($list as $item) {
            if (!empty($item['classes'])) {
                foreach ($item['classes'] as $v) {
                    /*保留班级状态为（已开课）或者 班级id为给定的班级*/
                    if (isset($cid) && $v['cid'] !== $cid) {
                        unset($v);
                    }
                    if ($v['status'] > 1) {
                        unset($v);
                    }
                }
            }
        }
        return $list;
    }

    /*获取单个学生的上课时间表列表*/
    public static function getScheduleOfStudent($sid, $cid)
    {
        $data = Student::get($sid, ['classes' => ['lesson.chapters', 'courseArranges', 'classroom']]);
        if (!empty($data['classes'])) {
            foreach ($data['classes'] as $v) {
                /*保留班级状态为（已开课）或者 班级id为给定的班级*/
                if (isset($cid) && $v['cid'] !== $cid) {
                    unset($v);
                }
                if ($v['status'] > 1) {
                    unset($v);
                }
            }
        }
        return $data['classes'];
    }

    /*通过班级名称获取dss系统对应的班级的id*/
    public function getDssClassInfo($class_name)
    {
        $end_point = 'http://dss.ygwo.cn:100/api/get_classid_by_name';
        $option['token'] = 'd66a19bc4b26cd68299116f07517ae0c';
        $option['name'] = $class_name;

        $curl = new Curl();
        $curl->get($end_point, $option);
        if ($curl->error) {
            $this->error = $curl->error_code;
            return false;
        }
        $response = json_decode($curl->response);
        if (!$response['ispass']) {
            $this->error = $response->errormsg;
            return false;
        }
        return $response->data;
    }

    public function getStudentIds()
    {
        return $this->students()->alias('student')->column('student.sid');
    }

    /**
     * @desc  创建班级、排班、排课
     * @author luo
     */
    public function createClassAndScheduleAndCourse($class_data, $schedule_data = [], $course_data = [])
    {
        $this->startTrans();
        try {

            //--1-- 创建班级
            $result = $this->allowField(true)->save($class_data);
            $cid = $this->getAttr('cid');
            if (!$result) {
                throw new Exception('班级创建失败');
            }

            //--2-- 排班
            if (!empty($schedule_data)) {
                //--2.1-- 循环每个时段间，创建排班
                foreach ($schedule_data as $per_schedule) {

                    if (!isset($per_schedule['week_day']) || !isset($per_schedule['int_start_hour'])
                        || !isset($per_schedule['int_end_hour']) || !isset($per_schedule['cr_id'])) {
                        throw new Exception('排班上课时间或教室id错误');
                    }

                    $insert_data = $class_data;
                    $insert_data['week_day'] = $per_schedule['week_day'];
                    $insert_data['int_start_hour'] = $per_schedule['int_start_hour'];
                    $insert_data['int_end_hour'] = $per_schedule['int_end_hour'];
                    $insert_data['cr_id'] = isset($per_schedule['cr_id']) ? $per_schedule['cr_id'] : $this->getAttr('cr_id');

                    $schedule = new ClassSchedule();
                    $add_schedule_rs = $schedule->addSchedule($this, $insert_data);
                    if (!$add_schedule_rs) {
                        throw new Exception($schedule->getError());
                    }
                }
            }

            //--3-- 排课
            if (!empty($course_data)) {
                $cids = [$this->getAttr('cid')];
                $exclude_holidays = isset($course_data['exclude_holidays']) ? (int)$course_data['exclude_holidays'] : 0;

                $course = new CourseArrange();
                $rs = $course->addBatchCourse($cids, $exclude_holidays);
                if (!$rs) {
                    throw new Exception($course->getError());
                }
            }

            $this->commit();

        } catch (\Exception $e) {

            $this->rollback();
            return $this->exception_error($e);
        }

        return $cid;
    }

    //班级增加一个学生
    public function joinOneStudent($data)
    {
        $class_student_model = new ClassStudent();

        if (!isset($data['sid']) || !isset($data['cid'])) return $this->user_error('加入班级缺少学生id或者班级id');

        try {
            $this->startTrans();
            /*$w['sid'] = $data['sid'];
            $w['cid'] = $data['cid'];
            $w['status'] = ClassStudent::STATUS_CLASS_TRANSFER;
            $class_student = $class_student_model->where($w)->find();
            if (!empty($class_student)) {
                $class_student->status = ClassStudent::STATUS_NORMAL;
                $rs = $class_student->allowField('status')->isUpdate(true)->save();
                if ($rs === false) return false;

                return true;
            }*/

            $rs = $class_student_model->isUpdate(false)->save($data);
            if (!$rs) $this->user_error('关联增加班级学生失败');

            $rs = $this->updateStudentNum($data['cid']);
            if ($rs === false) return false;

            $this->commit();
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        return true;
    }

    public function quitClass($sid)
    {
        $where['sid'] = $sid;
        $where['cid'] = $this->getData('cid');
        $pivot = ClassStudent::get($where);
        if (empty($pivot)) {
            $this->error = '该同学不在班级中';
            return false;
        }
        $this->startTrans();
        try {
            if (!empty($pivot['oi_id'])) {
                /*更新关联order_item的分班状态*/
                OrderItem::resetAcStatus($pivot['oi_id']);
            }
            $pivot->delete(true);
            $this->setDec('student_nums', 1);
            $this->commit();
        } catch (\Exception $e) {
            $this->rollback();
            $this->error = $e->getMessage();
            return false;
        }
        return true;
    }


    /**
     * 定时任务，更新班级的status
     * 班级状态(0:待开课招生中,1:已开课,2:已结课) 根据start_lesson_time字段与当天的日期对比
     */
    public static function autoUpdateStatus()
    {
        $where['status'] = 1;
        $where['start_lesson_time'] = ['<=', time()];
        $list = self::all($where);
        foreach ($list as $cls) {
            $cls->save(['status', 1]);
        }
    }

    public function updateClassAndSchedule($class_data, $schedule_data)
    {
        if (!isset($class_data['cid']) || empty($class_data['cid'])) return $this->user_error('缺少参数cid');

        $this->startTrans();
        try {

            // 获取班级信息改变的值
            $old_data = Classes::get($class_data['cid'])->toArray();
            $content = get_array_diff_value($old_data, $class_data);

            $rs = $this->updateClass($class_data);
            if (!$rs) throw new FailResult($this->getError());

            $schedule_model = new ClassSchedule();
            $rs = $schedule_model->updateScheduleOfClass($class_data['cid'], $schedule_data);
            if (!$rs) throw new FailResult('更新班级排班失败');

            // 添加一条编辑班级信息 操作日志
            ClassLog::addEditClassLog($class_data, $content, $this);

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;
    }

    public function updateClass($class_data)
    {
        $old_class = $this->find($class_data['cid']);
        if (empty($old_class)) return $this->user_error('原班级不存在');

        //判断是否有设置科目
        if (isset($class_data['sj_id']) && empty($class_data['sj_id'])) {
            return $this->user_error('科目不能为空!');
        }

        if (isset($class_data['class_name']) && empty($class_data['class_name'])) {
            return $this->user_error('班级名称不能为空!');
        }

        if (isset($class_data['second_eids']) && !empty($class_data['second_eids'])) {
            $class_data['second_eid'] = $class_data['second_eids'][0];
        }
        //判断班级名称重复
        $w_ex['class_name'] = $class_data['class_name'];
        $w_ex['bid'] = $class_data['bid'];
        $ex_class = $this->m_classes->where($w_ex)->find();
        if ($ex_class && $ex_class['cid'] != $class_data['cid']) {
            return $this->user_error('班级名称已经存在，请重新命名!');
        }

        //判断班级编号的重复
        if (!empty($class_data['class_no'])) {
            unset($w_ex['class_name']);
            $w_ex['class_no'] = $class_data['class_no'];
            $ex_class = $this->m_classes->where($w_ex)->find();
            if ($ex_class && $ex_class['cid'] != $class_data['cid']) {
                return $this->user_error('班级编号已经存在，请重新命名!');
            }
        }

        if (isset($class_data['lid']) && $class_data['lid'] > 0) {
            $lesson = Lesson::get($class_data['lid']);
            if ($class_data['sj_id'] > 0 && !in_array($class_data['sj_id'], $lesson->getAttr('sj_ids'))) {
                return $this->user_error('选择的科目与选择课程的科目不一致');
            }
        }

        if (isset($class_data['sg_id'])) {
            $sg_id = intval($class_data['sg_id']);
            $sg_info = get_sg_info($sg_id);
            if ($sg_info) {
                $class_data['subject_grade'] = $sg_info['grade'];
            }
        }


        if (isset($class_data['lesson_times']) && $class_data['lesson_times'] < $old_class['lesson_times']) {
            $arrange_times = (new CourseArrange())->where('cid', $class_data['cid'])->where('is_cancel', 0)->count();
            if ($class_data['lesson_times'] < $arrange_times) return $this->user_error('排课次数不能小于已经排的次数');
        }

        if (isset($class_data['lid']) && $old_class['lid'] != $class_data['lid']) {
            CourseArrange::UpdateLidOfClass($old_class, $class_data['lid']);
        }

        if (isset($class_data['teach_eid']) && $old_class['teach_eid'] != $class_data['teach_eid']) {
            CourseArrange::UpdateTeachEidOfClass($old_class, $class_data['teach_eid']);
        }

        if (isset($class_data['sj_id']) && $old_class['sj_id'] != $class_data['sj_id']) {
            CourseArrange::UpdateUnattendanceSjid($old_class, $class_data['sj_id']);
        }

        $rs = $this->isUpdate(true)->allowField(true)->save($class_data);
        if ($rs === false) return $this->user_error('更新班级信息失败');

        return true;
    }

    //学生转班
    public function transferClass($data)
    {
        $old_cid = $data['old_cid'];
        $new_cid = $data['new_cid'];

        $this->startTrans();
        try {
            $m_cs = new ClassStudent();
            /** @var ClassStudent $old_cs */
            $old_cs = $m_cs->where('sid', $data['sid'])->where('cid', $old_cid)->findOrFail();

            $cs_data = [
                'sid' => $data['sid'],
                'cid' => $new_cid,
                'sl_id' => $old_cs['sl_id'],
                'in_time' => time(),
            ];
            $rs = $this->joinOneStudent($cs_data);
            if ($rs === false) throw new FailResult($this->getErrorMsg());

            $rs = $old_cs->delete();
            if (!$rs) throw new FailResult($old_cs->getErrorMsg());

            $rs = $this->updateStudentNum($old_cid);
            if ($rs === false) return false;

            // 添加一条学员转班日志
            StudentLog::addTransferClassLog($data['sid'], $data['old_cid'], $data['new_cid']);


        } catch (FailResult $e) {
            $this->rollback();
            return $this->user_error($e->getMessage());
        } catch (Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }
        $this->commit();

        return true;
    }

    /**
     * 班级结课操作
     * @param array $sl_id 同时结课学生的student_lesson
     */
    public function closeClass(array $sl_id = [])
    {
        $cid = $this->getData('cid');
        $this->startTrans();
        try {

            // 解除班级学员与老师之间的关系
            $mClassStudent = new ClassStudent;
            $w_cs['cid'] = $cid;
            $w_cs['status'] = 1;
            $sids = $mClassStudent->where($w_cs)->column('sid');
            $class = get_class_info($cid);
            $type = EmployeeStudent::TYPE_CLASS;
            $lid = $class['lid'];
            foreach ($sids as $sid) {
                $info = array(
                    'sid' => $sid,
                    'rid' => EmployeeStudent::EMPLOYEE_TEACHER,
                    'eid' => $class['teach_eid']
                );
                EmployeeStudent::deleteEmployeeStudentRelationship($info, $type, $lid, $cid);
            }
            // 解除班级学员与助教之间的关系
            if ($class['second_eids']) {
                $second_eids = explode(',', $class['second_eids']);
                foreach ($second_eids as $eid) {
                    foreach ($sids as $sid) {
                        $info = array(
                            'sid' => $sid,
                            'rid' => EmployeeStudent::EMPLOYEE_TA,
                            'eid' => $eid
                        );
                        EmployeeStudent::deleteEmployeeStudentRelationship($info, $type, $lid, $cid);
                    }
                }
            }

            $data = [];
            $data['status'] = self::STATUS_CLOSE;
            $data['end_lesson_time'] = request()->time();
            $this->save($data);
            ClassStudent::update(['is_end' => ClassStudent::IS_END_YES, 'status' => 9], ['cid' => $cid]);
            if (!empty($sl_id)) {
                $w = [];
                $w['sl_id'] = ['in', $sl_id];
                StudentLesson::update(['lesson_status' => StudentLesson::LESSON_STATUS_DONE], $w);

                // 添加学员结课日志
                foreach ($sl_id as &$sl) {
                    $studentlesson = StudentLesson::get($sl);
                    StudentLog::addCloseLog($studentlesson);
                }
            }

            // 删除班级未考勤的排课
            $ca_ids = CourseArrange::where(['cid' => $cid, 'is_attendance' => CourseArrange::IS_ATTENDANCE_NO])->column('ca_id');
            if (!empty($ca_ids)) {
                foreach ($ca_ids as &$ca_id) {
                    $course = CourseArrange::get($ca_id);
                    $res = $course->deleteOneCourse($course);
                    if ($res === false) {
                        $this->rollback();
                        return $this->sql_delete_error('course_arrange');
                    }
                    $course = $course->toArray();
                    // 添加一条删除班级排课日志
                    ClassLog::addDeleteClassArrangeLog($course);
                }
            }

            // 添加一条班级结课记录
            ClassLog::addClassCloseLog($this);

        } catch (\Exception $exception) {
            $this->rollback();
            $this->error = '班级结课失败！' . $exception->getMessage();
            return false;
        }
        $this->commit();
        return true;
    }

    /**
     * 升级班级
     * @param array $info
     */
    public function upgrade(array $input, $old_cid = 0)
    {

        $new_cls = Classes::get($input['cid']);
        if (empty($new_cls)) {
            return $this->user_error('升级到的目标班级不存在!');
        }
        $from_cls = Classes::get($old_cid);
        $mClassStudent = new ClassStudent();
        $this->startTrans();
        try {

            //1.创建新班级与学生的class_student记录
            $input['from_cls'] = $from_cls;
            $result = $new_cls->addClassStudentsAfterClassUpgrade($input);
            if (!$result) {
                $this->rollback();
                return $this->user_error($new_cls->getError());
            }
            //2.将升级到的班级的parent_id 设置为 从班级id
            $new_cls->parent_cid = $old_cid;

            $w_cs['cid'] = $new_cls['cid'];
            $w_cs['status'] = 1;

            $cs_count = $mClassStudent->where($w_cs)->count();

            $new_cls->student_nums = $cs_count;

            if($new_cls->plan_student_nums < $cs_count){
                $new_cls->plan_student_nums = $cs_count;
            }

            $result = $new_cls->save();
            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('class');
            }

            //如果原来班级没有结课
            if($from_cls->status != 2) {
                $result = $from_cls->endClass();
                if (false === $result) {
                    $this->rollback();
                    return false;
                }
            }

            // 添加 一条 班级升班日志
            ClassLog::addClassUpgradeLog($new_cls, $from_cls);
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return true;
    }

    /**
     * 升班操作后给新升级的班级添加学员class_student
     * @param array $input
     * @return bool
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function addClassStudentsAfterClassUpgrade(array $input)
    {
        $cid = $this->getData('cid');
        $lid = $this->getData('lid');
        $class_info = $this->getData();
        $arr_deal_sids = $input['sids'];

        $w_sl['lid'] = $lid;
        $w_sl['lesson_status'] = ['LT', 2];

        $mStudentLesson = new StudentLesson();

        $cs_fields = ['cid','bid','og_id'];
        $this->startTrans();
        try {
            foreach ($arr_deal_sids as $key => $sid) {
               $sl_id = 0;

                $w_sl['sid'] = $sid;
                $w_sl['lid'] = $lid;
                $m_sl = $mStudentLesson->where($w_sl)->find();
                if ($m_sl) {
                    $sl_id = $m_sl->sl_id;
                }
                $w_cs['sid'] = $sid;
                $w_cs['cid'] = $cid;
                $w_cs['status'] = 1;
                $w_cs['is_end'] = 0;
                $mClassStudent = new ClassStudent();
                $ex_cs = $mClassStudent->where($w_cs)->find();
                if (!$ex_cs) {
                    array_copy($cs, $class_info, $cs_fields);
                    $cs['sid'] = $sid;
                    $cs['status'] = 1;
                    $cs['sl_id'] = $sl_id;
                    $cs['in_time'] = time();
                    $cs['in_way'] = ClassStudent::IN_WAY_UPGRADE;

                    $result = $mClassStudent->save($cs);
                    if(!$result){
                        $this->rollback();
                        return $this->sql_add_error('class_student');
                    }

                }

            }
        }catch(\Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;
    }

    /**
     * 验证一个学生能否加入该班级
     * @param $join_info
     */
    public function canStudentJoin(array &$join_info)
    {
        $sid = $join_info['sid'];
        $int_day = $join_info['int_day'];
        if ($this->isClose()) {
            $this->error = '该班级已经结课!';
            return false;
        }
        $cid = $this->getData('cid');
        $lid = $this->getData('lid');

        $w = [];
        $w['sid'] = $sid;
        $w['lid'] = $lid;
        $student_lesson = StudentLesson::get($w);
        if (empty($student_lesson)) {
            $this->error = '该同学还没有购买该班级所属的课程!';
            return false;
        }
        $join_info['sl_id'] = $student_lesson['sl_id'];

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $latest_record = (new ClassStudent())->where($w)->order('in_time', 'desc')->find();
        if (empty($latest_record)) {
            /*没有出入班记录，可以直接加入*/
            return true;
        } else {
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    $this->error = '该同学已经在该班级中了!';
                    return false;
                    break;
                case '退班':
                    if ($latest_record['in_time'] >= $int_day) {
                        $msg = sprintf('该同学在该班级有一条退班记录，退班日期是%s' . $latest_record['in_time'] . '重新入班日期必须要大于退班日期!');
                        $this->error = $msg;
                        return false;
                    } else {
                        return true;
                    }
                    break;
                case '停课' :
                    $this->error = '该同学已经在该班级中了,并且最新的一条出入班记录为停课!';
                    return false;
                    break;
                case '转班' :
                    if ($latest_record['in_time'] >= $int_day) {
                        $msg = sprintf('该同学在该班级有一条转班记录，转班日期是%s' . $latest_record['in_time'] . '重新入班日期必须要大于转班日期!');
                        $this->error = $msg;
                        return false;
                    } else {
                        return true;
                    }
                    break;
                case '结课' :
                    if ($latest_record['in_time'] >= $int_day) {
                        $msg = sprintf('该同学在该班级有一条结课记录，结课日期是%s' . $latest_record['in_time'] . '重新入班日期必须要大于结课日期!');
                        $this->error = $msg;
                        return false;
                    } else {
                        return true;
                    }
                    break;
                case '休学' :
                    $this->error = '该同学已经在该班级中了，并且最新的一条出入班记录为休学!';
                    return false;
                    break;
                case '退学' :
                    if ($latest_record['in_time'] >= $int_day) {
                        $msg = sprintf('该同学在该班级有一条退学记录，退学日期是%s' . $latest_record['in_time'] . '重新入班日期必须要大于退学日期!');
                        $this->error = $msg;
                        return false;
                    } else {
                        return true;
                    }
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }
        }

    }

    public function joinStudent($join_info)
    {
        if (!$this->canStudentJoin($join_info)) {
            return false;
        }
        $data = [];
        $data['og_id'] = $this->getData('og_id');
        $data['bid'] = $this->getData('bid');
        $data['cid'] = $this->getData('cid');
        $data['sid'] = $join_info['sid'];
        $data['sl_id'] = $join_info['sl_id'];
        $data['in_time'] = $join_info['int_day'];
        if (isset($join_info['in_way'])) {
            $data['in_way'] = $join_info['in_way'];
        }
        $data['status'] = ClassStudent::STATUS_NORMAL;
        $data['status_text'] = '入班';
        $data['remark'] = '加入班级';
        return ClassStudent::create($data, true);
//        return $this->hasManyClassStudents()->save($data);
    }

    /**
     * 退班
     * @param $sid
     * @return bool
     */
    public function student_quit($sid)
    {
        $cid = $this->getData('cid');
        $quit_day = int_day(request()->time());

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $records = (new ClassStudent())->where($w)->order('in_time', 'desc')->select();
        if (empty($records)) {
            $this->error = '没有查询到该同学在该班级的出入班记录！';
            return false;
        } else {
            $latest_record = array_shift($records);
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    if ($quit_day <= $latest_record['int_time']) {
                        return $this->user_error('数据异常，退班日期必须要大于入班日期');
                    } else {
                        //todo 伪代码
                        $latest_record->data('out_time', $quit_day - 1)->save();
                        $new_record = clone $latest_record;
                        $new_record['status'] = 0;
                        $new_record['status_text'] = '退班';
                        $new_record['out_time'] = 0;
                        $new_record['in_time'] = $quit_day;
                        unset($new_record['cs_id'], $new_record['origin']);
                        $new_record->allowfield(true)->isUpdate(false)->save();
                    }
                    break;
                case '退班':
                    return $this->user_error('该同学已经退班状态了！');
                    break;
                case '停课' :
                    if ($quit_day < $latest_record['in_time']) {
                        return $this->user_error('该同学当前最新的出入班记录为停课状态，退班日期不能小于停课日期！');
                    } else {
                        $latest_record['out_time'] = $quit_day;
                        $latest_record->save();
                    }
                    $new_record = clone $latest_record;
                    $new_record['status'] = 0;
                    $new_record['status_text'] = '退班';
                    $new_record['out_time'] = 0;
                    $new_record['in_time'] = $quit_day;
                    unset($new_record['cs_id'], $new_record['origin']);
                    $new_record->allowfield(true)->isUpdate(false)->save();
                    return false;
                case '转班' :
                    return $this->user_error('该同学已经转班了，不需要退班了！');
                    break;
                case '结课' :
                    return $this->user_error('该同学已经结课了，不需要退班了！');
                    break;
                case '休学' :
                    return $this->user_error('该同学已经结课了，不需要退班了！');
                    break;
                case '退学' :
                    return $this->user_error('该同学已经退学了，不需要退班了！');
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }

        }
    }

    /**
     * 停课
     * @param $sid
     */
    public function student_stop($stop_info)
    {
        $sid = $stop_info['sid'];
        $stop_int_day = $stop_info['stop_int_day'];
        $cid = $this->getData('cid');

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $records = (new ClassStudent())->where($w)->order('in_time', 'desc')->select();
        if (empty($records)) {
            $this->error = '没有查询到该同学在该班级的出入班记录！';
            return false;
        } else {
            $latest_record = array_shift($records);
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    if ($stop_int_day <= $latest_record['int_time']) {
                        return $this->user_error('退班日期必须要大于入班日期');
                    } else {
                        //todo 伪代码
                        $latest_record->data('out_time', $stop_int_day - 1)->save();
                        $new_record = clone $latest_record;
                        $new_record['status'] = 0;
                        $new_record['status_text'] = '停课';
                        $new_record['out_time'] = 0; //todo 预计复课时间
                        $new_record['in_time'] = $stop_int_day;
                        unset($new_record['cs_id'], $new_record['origin']);
                        $new_record->allowfield(true)->isUpdate(false)->save();
                    }
                    break;
                case '退班':
                    return $this->user_error('该同学已经退班了！');
                    break;
                case '停课' :/*编辑停课日期*/
                    $last_in_record = array_shift($records);
                    if ($stop_int_day <= $last_in_record['in_time']) {
                        return $this->user_error('停课日期不能大于入班日期');
                    }
                    //todo 停课期间不能有学生考勤
                    $last_in_record->data('out_time', $stop_int_day - 1)->save();
                    $latest_record->data('in_time', $stop_int_day)->save();
                    return true;
                    break;
                case '转班' :
                    return $this->user_error('该同学已经转班了，不能进行停课操作了！');
                    break;
                case '结课' :
                    return $this->user_error('该同学已经结课了，不能进行停课操作了！');
                    break;
                case '休学' :
                    return $this->user_error('该同学已经结课了，不能进行停课操作了！');
                    break;
                case '退学' :
                    return $this->user_error('该同学已经退学了，不能进行停课操作了！');
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }

        }
    }

    /**
     * 转班
     * @param $sid
     */
    public function student_transfer($sid)
    {
        $cid = $this->getData('cid');
        $transfer_int_day = int_day(request()->time);

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $records = (new ClassStudent())->where($w)->order('in_time', 'desc')->select();
        if (empty($records)) {
            $this->error = '没有查询到该同学在该班级的出入班记录！';
            return false;
        } else {
            $latest_record = array_shift($records);
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    if ($transfer_int_day <= $latest_record['int_time']) {
                        return $this->user_error('转班日期必须要大于最近的入班日期');
                    } else {
                        //todo 伪代码
                        $latest_record->data('out_time', $transfer_int_day - 1)->save();
                        $new_record = clone $latest_record;
                        $new_record['status'] = 0;
                        $new_record['status_text'] = '转班';
                        $new_record['out_time'] = 0;
                        $new_record['in_time'] = $transfer_int_day;
                        unset($new_record['cs_id'], $new_record['origin']);
                        $new_record->allowfield(true)->isUpdate(false)->save();
                    }
                    break;
                case '退班':
                    return $this->user_error('该同学已经退班了！');
                    break;
                case '停课' :/*编辑停课日期*/
                    if ($transfer_int_day <= $latest_record['in_time']) {
                        return $this->user_error('转班日期不能小于停课日期！');
                    }
                    //todo 停课期间不能有学生的考勤
                    $latest_record->data('out_time', $transfer_int_day - 1)->save();
                    $new_record = clone $latest_record;
                    $new_record['status'] = 0;
                    $new_record['status_text'] = '转班';
                    $new_record['out_time'] = 0;
                    $new_record['in_time'] = $transfer_int_day;
                    unset($new_record['cs_id'], $new_record['origin']);
                    $new_record->allowfield(true)->isUpdate(false)->save();
                    return true;
                    break;
                case '转班' :
                    return $this->user_error('该同学已经转班了！');
                    break;
                case '结课' :
                    return $this->user_error('该同学已经结课了，不能进行转班操作了！');
                    break;
                case '休学' :
                    return $this->user_error('该同学已经休学了，不能进行转班操作了！');
                    break;
                case '退学' :
                    return $this->user_error('该同学已经退学了，不能进行转班操作了！');
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }

        }
    }

    /**
     * 给班级的某个同学结课
     * @param $sid
     */
    public function student_close($sid)
    {
        $cid = $this->getData('cid');
        $close_int_day = int_day(request()->time);

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $records = (new ClassStudent())->where($w)->order('in_time', 'desc')->select();
        if (empty($records)) {
            $this->error = '没有查询到该同学在该班级的出入班记录！';
            return false;
        } else {
            $latest_record = array_shift($records);
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    if ($close_int_day <= $latest_record['int_time']) {
                        return $this->user_error('结课日期必须要大于最近的入班日期');
                    } else {
                        //todo 伪代码
                        $latest_record->data('out_time', $close_int_day - 1)->save();
                        $new_record = clone $latest_record;
                        $new_record['status'] = 0;
                        $new_record['status_text'] = '结课';
                        $new_record['out_time'] = 0;
                        $new_record['in_time'] = $close_int_day;
                        unset($new_record['cs_id'], $new_record['origin']);
                        $new_record->allowfield(true)->isUpdate(false)->save();
                    }
                    break;
                case '退班':
                    return $this->user_error('该同学已经退班了！');
                    break;
                case '停课' :/*编辑停课日期*/
                    if ($close_int_day <= $latest_record['in_time']) {
                        return $this->user_error('结课日期不能小于最近的停课日期！');
                    }
                    //todo 停课期间不能有学生的考勤
                    $latest_record->data('out_time', $close_int_day - 1)->save();
                    $new_record = clone $latest_record;
                    $new_record['status'] = 0;
                    $new_record['status_text'] = '结课';
                    $new_record['out_time'] = 0;
                    $new_record['in_time'] = $close_int_day;
                    unset($new_record['cs_id'], $new_record['origin']);
                    $new_record->allowfield(true)->isUpdate(false)->save();
                    return true;
                    break;
                case '转班' :
                    return $this->user_error('该同学已经转班了！');
                    break;
                case '结课' :
                    return $this->user_error('该同学已经结课了，不能进行结课操作了！');
                    break;
                case '休学' :
                    return $this->user_error('该同学已经休学了，不能进行结课操作了！');
                    break;
                case '退学' :
                    return $this->user_error('该同学已经退学了，不能进行结课操作了！');
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }

        }
    }

    /**
     * 休学
     * @param $sid
     */
    public function student_suspend($suspend_info)
    {
        $sid = $suspend_info['sid'];
        if (!empty($suspend_info['suspend_int_day'])) {
            $suspend_int_day = $suspend_info['suspend_int_day'];
        } else {
            $suspend_int_day = int_day(request()->time());
        }
        $cid = $this->getData('cid');

        /*获取该同学在该班级的的最后一条出入记录*/
        $w = [];
        $w['cid'] = $cid;
        $w['sid'] = $sid;
        $records = (new ClassStudent())->where($w)->order('in_time', 'desc')->select();
        if (empty($records)) {
            $this->error = '没有查询到该同学在该班级的出入班记录！';
            return false;
        } else {
            $latest_record = array_shift($records);
            /*1.入学    2.退班    3.停课  4.转班    5.结课    6.休学    7.退学*/
            switch ($latest_record['status']) {
                case '入学' :
                    if ($suspend_int_day <= $latest_record['int_time']) {
                        return $this->user_error('退班日期必须要大于入班日期');
                    } else {
                        //todo 伪代码
                        $latest_record->data('out_time', $suspend_int_day - 1)->save();
                        $new_record = clone $latest_record;
                        $new_record['status'] = 0;
                        $new_record['status_text'] = '停课';
                        $new_record['out_time'] = 0; //todo 预计复课时间
                        $new_record['in_time'] = $suspend_int_day;
                        unset($new_record['cs_id'], $new_record['origin']);
                        $new_record->allowfield(true)->isUpdate(false)->save();
                    }
                    break;
                case '退班':
                    return $this->user_error('该同学已经退班了！');
                    break;
                case '停课' :/*编辑停课日期*/
                    $last_in_record = array_shift($records);
                    if ($suspend_int_day <= $last_in_record['in_time']) {
                        return $this->user_error('停课日期不能大于入班日期');
                    }
                    //todo 停课期间不能有学生考勤
                    $last_in_record->data('out_time', $suspend_int_day - 1)->save();
                    $latest_record->data('in_time', $suspend_int_day)->save();
                    return true;
                    break;
                case '转班' :
                    return $this->user_error('该同学已经转班了，不能进行停课操作了！');
                    break;
                case '结课' :
                    return $this->user_error('该同学已经结课了，不能进行停课操作了！');
                    break;
                case '休学' :
                    return $this->user_error('该同学已经结课了，不能进行停课操作了！');
                    break;
                case '退学' :
                    return $this->user_error('该同学已经退学了，不能进行停课操作了！');
                    break;
                default:
                    $this->error = '出入班记录状态异常!';
                    return false;
            }

        }
    }

    /**
     * 该班级是否已经结课
     */
    public function isClose()
    {
        if ($this->getData('status') == self::STATUS_CLOSE) {
            return true;
        } else {
            return false;
        }
    }

    public static function UpdateArrangeTimes($cid)
    {
        $num = (new CourseArrange())->where('cid', $cid)->where('is_cancel = 0')->count();
        $rs = (new Classes())->where('cid', $cid)->update(['arrange_times' => $num]);
        if ($rs === false) throw new FailResult('更新班级已排课次数失败');

        return true;
    }

    //更新班级人数
    public function updateStudentNum($cid = 0)
    {
        if ($cid == 0) {
            $cid = $this->getData('cid');
        }
        $num = $this->m_class_student->where('cid', $cid)->where('status', ClassStudent::STATUS_NORMAL)->count();
        if (!isset($this->cid)) {
            $class = get_class_info($cid);
            $this->data($class);
        } else {
            $class = $this->getData();
        }
        $data = [
            'student_nums' => $num,
            'nums_rate' => $class['plan_student_nums'] <= 0 ? 0 : round(($num / $class['plan_student_nums']), 2),
        ];
        $rs = $this->where('cid', $cid)->update($data);
        if ($rs === false) {
            return $this->sql_save_error('class');
        }

        return true;
    }

    /**
     * 创建一个班级
     * @param  [type] $input [description]
     * @return [type]        [description]
     */
    public function createOneClass(&$input)
    {

        $class_schedule = isset($input['schedules']) ? $input['schedules'] : [];
        if (isset($input['schedules'])) unset($input['schedules']);
        $course_arrange = isset($input['course_arrange']) ? $input['course_arrange'] : 0;
        unset($input['course_arrange']);

        //判断是否有设置科目
        if (empty($input['sj_id'])) {
            return $this->user_error('科目不能为空!');
        }

        if (empty($input['class_name'])) {
            return $this->user_error('班级名称不能为空!');
        }
        //判断班级名称重复
        $w_ex['class_name'] = $input['class_name'];
        $w_ex['bid'] = $input['bid'];

        $ex_class = $this->m_classes->where($w_ex)->find();

        if ($ex_class) {
            return $this->user_error('班级名称已经存在，请重新命名!');
        }


        //判断班级编号的重复
        if (!empty($input['class_no'])) {
            unset($w_ex['class_name']);
            $w_ex['class_no'] = $input['class_no'];
            $ex_class = $this->m_classes->where($w_ex)->find();

            if ($ex_class) {
                return $this->user_error('班级编号已经存在，请重新命名!');
            }
        }
        $input['sg_id'] = intval($input['sg_id']);
        //科目级别 subject_grade 自动更新
        if ($input['sg_id'] > 0) {
            $sg_info = get_sg_info($input['sg_id']);
            if ($sg_info) {
                $input['subject_grade'] = $sg_info['grade'];
            }
        }

        if (isset($input['lid']) && $input['lid'] > 0) {
            $lesson = Lesson::get($input['lid']);
            if (!in_array($input['sj_id'], $lesson->getAttr('sj_ids'))) {
                return $this->user_error('选择的科目与选择课程的科目不一致');
            }
        }

        $cid = 0;
        $this->startTrans();

        try {
            $result = $this->data([])->allowField(true)->isUpdate(false)->save($input);
            if (!$result) {
                exception('班级创建失败');
            }

            $cid = $this->getData('cid');


            if (!empty($class_schedule)) {
                $result = $this->createOneClassSchedule($class_schedule, $cid);
                if (!$result) {
                    return false;
                }
            }

            if ($course_arrange) {
                $cids = [$cid];

                $exclude_holidays = isset($input['exclude_holidays']) ? (int)$input['exclude_holidays'] : 0;

                $mCourseArrange = new CourseArrange();
                $result = $mCourseArrange->batAutoCreateClassArrange($cids, $exclude_holidays);

                if (!$result) {
                    return $this->user_error($mCourseArrange->getError());
                }
            }


            // 添加一条创建班级 操作日志
            ClassLog::addCreateClassLog($this);

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return $cid;
    }


    public function createOneTmpClass(&$input)
    {

        $class_schedule = isset($input['schedule']) ? $input['schedule'] : [];
        if (isset($input['schedule'])) unset($input['schedule']);

        //判断是否有设置科目
        if (empty($input['sj_id'])) {
            return $this->user_error('科目不能为空!');
        }

        if (empty($input['start_lesson_time']) || empty($input['end_lesson_time'])) {
            return $this->user_error('开始时间和结束时间不能为空');
        }

        if (empty($input['class_name'])) {
            return $this->user_error('班级名称不能为空!');
        }
        //判断班级名称重复
        $w_ex['class_name'] = $input['class_name'];
        $w_ex['bid'] = $input['bid'];
        $ex_class = $this->m_classes->where($w_ex)->find();
        if ($ex_class) {
            return $this->user_error('班级名称已经存在，请重新命名!');
        }

        //判断班级编号的重复
        if (!empty($input['class_no'])) {
            unset($w_ex['class_name']);
            $w_ex['class_no'] = $input['class_no'];
            $ex_class = $this->m_classes->where($w_ex)->find();
            if ($ex_class) {
                return $this->user_error('班级编号已经存在，请重新命名!');
            }
        }
        $input['sg_id'] = intval($input['sg_id']);
        //科目级别 subject_grade 自动更新
        if ($input['sg_id'] > 0) {
            $sg_info = get_sg_info($input['sg_id']);
            if ($sg_info) {
                $input['subject_grade'] = $sg_info['grade'];
            }
        }

        if (isset($input['lid']) && $input['lid'] > 0) {
            $lesson = Lesson::get($input['lid']);
            if (!in_array($input['sj_id'], $lesson->getAttr('sj_ids'))) {
                return $this->user_error('选择的科目与选择课程的科目不一致');
            }
        }

        try {
            $this->startTrans();
//            $input['class_type'] = self::CLASS_TYPE_TMP;
            $rs = $this->allowField(true)->save($input);
            if (!$rs) throw new FailResult($this->getErrorMsg());

            $cid = $this->getData('cid');
            if (!empty($class_schedule)) {
                $result = $this->createOneClassSchedule($class_schedule, $cid);
                if (!$result) {
                    return false;
                }
            }

            $this->commit();
        } catch (Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        return $cid;
    }

    /**
     * 创建班级的排课计划
     * @param  [type] $class_schedule [description]
     * @return [type]                [description]
     */
    public function createOneClassSchedule($schedule_data, $cid)
    {

        if (empty($schedule_data)) {
            return true;
        }
        $this->startTrans();
        try {
            foreach ($schedule_data as $schedule) {
                $mClassSchedule = new ClassSchedule();
                $csd_id = $mClassSchedule->createOneClassSchedule($schedule, $cid);

                if (!$csd_id) {
                    $this->rollback();
                    return $this->user_error($mClassSchedule->getError());
                }

            }
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    /**
     * 更新学员报读课程的分班状态
     * @param  [type] $sid [description]
     * @return [type]      [description]
     */
    public function updateStudentLessonAcStatus($sid, $nums = 1)
    {
        $sj_id = $this->getData('sj_id');

        $sl_list = StudentLesson::GetBySidAndSjId($sid, $sj_id);

        if ($sl_list) {
            $this->startTrans();
            try {
                foreach ($sl_list as $sl) {
                    $sl->ac_nums = $sl->ac_nums + $nums;
                    if ($sl->ac_nums >= $sl->need_ac_nums) {
                        $sl->ac_status = 2;
                    } else {
                        $sl->ac_status = 1;
                    }
                    if ($nums > 0) {
                        if ($sl->cid == 0) {
                            $sl->cid = $this->getData('cid');
                        }
                    } else {
                        if ($sl->cid == $this->getData('cid')) {
                            $sl->cid = 0;
                        }
                    }
                    $sl->save();
                }
            } catch (Exception $e) {
                $this->rollback();
                return $this->user_error($e->getMessage());
            }
            $this->commit();
        }

        return true;

    }

    /**
     * 获得指定班级的学生列表
     * @param  integer $cid [description]
     * @return [type]       [description]
     */
    public function getStudents($cid = 0)
    {
        if ($cid == 0) {
            $cid = $this->getData('cid');
        }

        $cs_list = [];

        $class_info = get_class_info($cid);


        if (!$class_info) {
            return $cs_list;
        }

        $w_cs['cid'] = $cid;
        $w_cs['status'] = 1;
        $w_cs['is_end'] = 0;

        if($class_info['status'] == 2){
            //如果班级已经结课
            $w_cs['is_end'] = 1;
            $w_cs['status'] = 9;
        }

        $mClassStudent = new ClassStudent();
        $m_cs_list = $mClassStudent->where($w_cs)->order('in_time DESC')->select();

        if (!$m_cs_list) {
            return $cs_list;
        }


        $sj_id = $class_info['sj_id'];
        $sg_id = $class_info['sg_id'];

        $mStudentLesson = new StudentLesson();
        foreach ($m_cs_list as $k=>$cs) {
            $cs_info = $cs->getData();
            $student_info = get_student_info($cs_info['sid']);

            if(!$student_info){
                unset($m_cs_list[$k]);
                continue;
            }

            $cs_info['student'] = $student_info;

            $student_lesson = $mStudentLesson->getStudentLessonInfo($cs_info['sid'], $sj_id, $sg_id, $cs_info['cid']);

            $cs_info['student_lesson'] = $student_lesson;

            if ($cs_info['sl_id'] == 0 && strpos($student_lesson['sl_id'], ',') === false && $student_lesson['sl_id'] > 0) {
                $cs_info['sl_id'] = $student_lesson['sl_id'];
                db('class_student')->where('cs_id', $cs_info['cs_id'])->update(['sl_id' => $student_lesson['sl_id']]);
            }

            if (strpos($student_lesson['sl_id'], ',') !== false) {
                $cs_info['sl_id'] = $student_lesson['sl_id'];
            }

            array_push($cs_list, $cs_info);

        }

        return $cs_list;

    }

    /**
     * 添加学生到班级
     * @param [type]  $sid    [description]
     * @param integer $in_way [description]
     * @param integer $sl_id [description]
     * @param integer $cid [description]
     */
    public function addStudent($sid, $in_way = 1, $sl_id = 0, $cid = 0, $in_time = 0)
    {
        $class_info = $this->getData();

        if (!isset($class_info['cid'])) {
            $class_info = get_class_info($cid);
            $this->data($class_info);
        }

        if ($cid == 0) {
            $cid = $class_info['cid'];
        }


        $w_cs['cid'] = $cid;
        $w_cs['sid'] = $sid;
        $mClassStudent = new ClassStudent();

        $m_cs = $mClassStudent->where($w_cs)->find();

        if ($in_time == 0) {
            $in_time = time();
        }
        $this->startTrans();
        try {
            if (!$m_cs) {
                $cs_info = [];
                array_copy($cs_info, $w_cs, ['cid', 'sid']);
                array_copy($cs_info, $class_info, ['og_id', 'bid']);
                $cs_info['in_way'] = $in_way;
                $cs_info['in_time'] = $in_time;
                $cs_info['sl_id'] = $sl_id;

                $result = $mClassStudent->data([])->isUpdate(false)->save($cs_info);

                if (!$result) {
                    $this->rollback();
                    return $this->sql_add_error('class_student');
                }
            } else {
                $update_class = [];
                $update_class['status'] = 1;
                $update_class['is_end'] = 0;
                $update_class['in_time'] = time();
                $update_class['out_time'] = 0;
                $update_class['sl_id'] = $sl_id;

                $w_cs_update['cs_id'] = $m_cs->cs_id;

                $result = $mClassStudent->save($update_class, $w_cs_update);

                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('class_student');
                }
            }

            $result = $this->updateStudentNum();

            if (!$result) {
                $this->rollback();
                return false;
            }

            // 添加　学员　入班级操作日志
            $class = Classes::get($class_info['cid']);
            ClassLog::addClassStudentInsertLog($class, $sid);

            // 创建学员与老师之间的关系
            $type = EmployeeStudent::TYPE_CLASS;
            $lid = $class->lid;
            $cid = $class->cid;
            $info = array(
                'sid' => $sid,
                'rid' => EmployeeStudent::EMPLOYEE_TEACHER,
                'eid' => $class->teach_eid
            );
            EmployeeStudent::addEmployeeStudentRelationship($info, $type, $lid, $cid);

            // 创建学员与助教之间的关系
            if (!empty($class->second_eids)) {
                foreach ($class->second_eids as $eid) {
                    $info = array(
                        'sid' => $sid,
                        'rid' => EmployeeStudent::EMPLOYEE_TA,
                        'eid' => $eid
                    );
                    EmployeeStudent::addEmployeeStudentRelationship($info, $type, $lid, $cid);
                }
            }


        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    /**
     * 或的单次课消费课时数
     * @param  integer $cid [description]
     * @return [type]       [description]
     */
    public function getConsumeLessonHour($cid = 0)
    {
        if ($cid == 0) {
            $cid = $this->getData('cid');
        }
        $consume_lesson_hour = 1.00;
        $class_info = get_class_info($cid);

        if (!$class_info) {
            return $consume_lesson_hour;
        }

        if ($class_info['consume_lesson_hour'] && $class_info['consume_lesson_hour'] > 0) {
            $consume_lesson_hour = $class_info['consume_lesson_hour'];
        }

        return $consume_lesson_hour;

    }

    /**
     * 更新排课次数
     * @param  integer $cid [description]
     * @return [type]       [description]
     */
    public function updateArrange($cid = 0)
    {
        if ($cid == 0) {
            $cid = $this->getData('cid');
        }
        $w_ca['cid'] = $cid;
        $w_ca['is_cancel'] = 0;

        $total = $this->m_course_arrange->where($w_ca)->count();

        if (!$total) {
            $total = 0;
        }

        $m_classes = $this->where('cid', $cid)->find();
        if (empty($m_classes)) return $this->user_error('班级不存在');

        $m_classes->arrange_times = $total;

        $result = $m_classes->save();

        if (false === $result) {
            return $this->sql_save_error('class');
        }

        return true;
    }

    /**
     * 班级结课
     * @param $end_sl_sids 结课的学员
     * @param int $cid  班级ID
     * @return bool
     */
    public function endClass($sl_end_sids = [],$cid = 0){
        if($cid == 0){
            $class_info = $this->getData();
            if(!empty($class_info)){
                $cid = $class_info['cid'];
            }
        }else{
            $class_info = get_class_info($cid);
            if($class_info) {
                $this->data($class_info);
            }
        }

        if(empty($class_info)){
            return $this->input_param_error('cid');
        }

        $teach_eid = $class_info['teach_eid'];

        $second_eids = [];

        if(!empty($class_info['second_eids'])){
            $second_eids = explode(',',$class_info['second_eids']);
        }

        $lid = $class_info['lid'];

        $mClassStudent = new ClassStudent;
        $this->startTrans();
        try {
            //将班级的所有学员的班级学员关系设置为结课状态
            $w_cs['cid'] = $cid;
            $w_cs['status'] = 1;

            $cs_end_sids = $mClassStudent->where($w_cs)->column('sid');

            $update_cs['status'] = 9;
            $update_cs['is_end'] = 1;

            $result = $mClassStudent->save($update_cs,$w_cs);
            if(false === $result){
                $this->rollback();
                return $this->sql_save_error('class_student');
            }

            //将班级状态设置为结课状态
            $update_class['status'] = self::STATUS_CLOSE;
            $update_class['end_lesson_time'] = time();

            $w_class['cid'] = $cid;

            $result = $this->save($update_class,$w_class);

            if(false === $result){
                $this->rollback();
                return $this->sql_save_error('class');
            }

            if(!empty($sl_end_sids)){
                $mStudentLesson = new StudentLesson();
                $mStudent = new Student();
                foreach($sl_end_sids as $sid){
                    $w_sl = [];
                    $w_sl['sid'] = $sid;
                    if($lid > 0) {
                        $w_sl['lid'] = $lid;
                    }else{
                        $w_sl['cid'] = $cid;
                    }
                    $w_sl['lesson_status'] = ['LT',StudentLesson::LESSON_STATUS_DONE];

                    $m_sl = $mStudentLesson->where($w_sl)->find();

                    if(!$m_sl){
                        $w_sl = [];
                        $w_sl['sid']    = $sid;
                        $w_sl['sj_ids'] = $class_info['sj_id'];
                        $m_sl = $mStudentLesson->where($w_sl)->find();
                    }

                    if(!$m_sl){
                        continue;
                    }
                    $m_sl['lesson_status'] = StudentLesson::LESSON_STATUS_DONE;
                    $result = $m_sl->save();
                    if(false === $result){
                        $this->rollback();
                        return $this->sql_save_error('student_lesson');
                    }

                    //刷新学员的剩余课时
                    $mStudent->updateLessonHours($sid);
                    StudentLog::addCloselog($m_sl);
                }
            }

            //将学员与老师关系解除
            $type = EmployeeStudent::TYPE_CLASS;
            foreach ($cs_end_sids as $sid) {
                $info = array(
                    'sid' => $sid,
                    'rid' => EmployeeStudent::EMPLOYEE_TEACHER,
                    'eid' => $teach_eid
                );
                EmployeeStudent::deleteEmployeeStudentRelationship($info, $type, $lid, $cid);
            }
            // 解除班级学员与助教之间的关系
            if (!empty($second_eids)) {

                foreach ($second_eids as $eid) {
                    foreach ($cs_end_sids as $sid) {
                        $info = array(
                            'sid' => $sid,
                            'rid' => EmployeeStudent::EMPLOYEE_TA,
                            'eid' => $eid
                        );
                        EmployeeStudent::deleteEmployeeStudentRelationship($info, $type, $lid, $cid);
                    }
                }
            }

            // 删除班级未考勤的排课
            $w_ca['cid'] = $cid;
            $w_ca['is_attendance'] = CourseArrange::IS_ATTENDANCE_NO;

            $ca_ids = CourseArrange::where($w_ca)->column('ca_id');
            if (!empty($ca_ids)) {
                foreach ($ca_ids as &$ca_id) {
                    $m_ca = CourseArrange::get($ca_id);
                    $ca_info = $m_ca->getData();
                    $result = $m_ca->deleteOneCourse($m_ca);
                    if (false === $result) {
                        $this->rollback();
                        return $this->sql_delete_error('course_arrange');
                    }
                    // 添加一条删除班级排课日志
                    ClassLog::addDeleteClassArrangeLog($ca_info);
                }
            }

            // 添加一条班级结课记录
            ClassLog::addClassCloseLog($this);

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }
}
