<?php
/**
 * Author: luo
 * Time: 2017-10-14 10:49
 **/

namespace app\api\model;

use app\common\exception\FailResult;
use app\common\Wechat;
use Overtrue\Pinyin\Pinyin;
use think\Exception;
use think\Request;
use think\Validate;

class Student extends Base
{
    public static $detail_fields = [
        ['type'=>'index','width'=>60,'align'=>'center'],
        ['title'=>'学员姓名','key'=>'student_name','align'=>'center'],
        ['title'=>'校区','key'=>'bid','align'=>'center'],
        ['title'=>'联系电话','key'=>'first_tel','align'=>'center'],
        ['title'=>'状态','key'=>'status','align'=>'center'],
    ];

    const STATUS_NORMAL = 1;    # 正常学员
    const STATUS_STOP = 20;     # 停课学员
    const STATUS_SUSPEND = 30;  # 休学学员
    const STATUS_FINISH = 50;   # 结课学员
    const STATUS_QUIT = 90;     # 退学学员
    const STATUS_SEAL = 100;    # 封存学员
    

    protected static function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        Student::event('after_insert', function ($model) {
            User::createStudentUserAfterCreateStudent($model);
        });
    }

    public $hidden = ['create_uid', 'update_time', 'is_delete', 'delete_time', 'delete_uid'];

    public $type = [
        'last_attendance_time' => 'timestamp',
        'option_fields' => 'json',
    ];

    protected function base($query)
    {
        parent::base($query);

    }

    protected $append = ['first_openid', 'second_openid'];

    protected $auto = ['pinyin', 'pinyin_abbr', 'birth_year', 'birth_month', 'birth_day'];

    protected function setGradeUpdateIntYmAttr($value, $data)
    {
        $value = intval($value);
        if (!empty($data['school_grade'])) {
            $value = date('Ym', time());
        }
        return $value;
    }

    protected function setPinyinAttr($value, $data)
    {
        if (!empty($data['student_name'])) {
            $temp = (new Pinyin())->name($data['student_name']);
            return join('', $temp);
        }
        return '';
    }

    protected function setPinyinAbbrAttr($value, $data)
    {
        if (!empty($data['student_name'])) {
            $temp = (new Pinyin())->abbr($data['student_name']);
            return $temp;
        }
        return '';
    }

    protected function setBirthTimeAttr($value)
    {
        $time = !is_numeric($value) ? strtotime($value) : $value;
        return $time > 0 ? $time : 0;
    }

    protected function getInTimeAttr($value)
    {
        return date('Y-m-d',$value);
    }

    protected function setInTimeAttr($value)
    {
        $time = !is_numeric($value) ? strtotime($value) : $value;
        return $time > 0 ? $time : 0;
    }

    protected function getBirthTimeAttr($value)
    {
        return $value !== 0 ? date('Y-m-d', $value) : $value;
    }


    protected function getFirstTelAttr($value)
    {
        return preg_replace('/[^\d]+/', '', $value);
    }

    protected function setBirthYearAttr($value, $data)
    {
        if (isset($data['birth_time']) && $data['birth_time'] > 0) {
            if (preg_match('/^\d{4}-\d{2}-\d{2}$/', $data['birth_time'])) {
                $da = explode('-', $data['birth_time']);
                $value = intval($da[1]);
                return $value ? $value : 0;
            }
            $data['birth_time'] = is_int($data['birth_time']) ? $data['birth_time'] : strtotime($data['birth_time']);
            $value = (int)date('Y', $data['birth_time']);
        }
        return $value ? $value : 0;
    }

    protected function setBirthMonthAttr($value, $data)
    {
        //if(is_null($value)) {

        if (isset($data['birth_time']) && $data['birth_time'] > 0) {
            if (preg_match('/^\d{4}-\d{2}-\d{2}$/', $data['birth_time'])) {
                $da = explode('-', $data['birth_time']);
                $value = intval($da[1]);
                return $value ? $value : 0;
            }
            $data['birth_time'] = is_int($data['birth_time']) ? $data['birth_time'] : strtotime($data['birth_time']);
            $value = (int)date('m', $data['birth_time']);
        }
        //}
        $value = is_null($value) ? 0 : $value;
        return $value;
    }

    protected function setBirthDayAttr($value, $data)
    {
        //if(is_null($value)) {
        if (isset($data['birth_time']) && $data['birth_time'] > 0) {
            if (preg_match('/^\d{4}-\d{2}-\d{2}$/', $data['birth_time'])) {
                $da = explode('-', $data['birth_time']);
                $value = intval($da[1]);
                return $value ? $value : 0;
            }
            $data['birth_time'] = is_int($data['birth_time']) ? $data['birth_time'] : strtotime($data['birth_time']);
            $value = (int)date('d', $data['birth_time']);
        }
        //}
        $value = is_null($value) ? 0 : $value;
        return $value;
    }


    public function setSchoolClassAttr($value)
    {
        return !empty($value) ? $value : 0;
    }

    public function setSchoolGradeAttr($value)
    {
        return !empty($value) ? $value : 0;
    }

    public function setSchoolIdAttr($value)
    {
        return !empty($value) ? $value : 0;
    }

    public function getFirstFamilyRelationTextAttr($value)
    {
        $map = ['未设置', '自己', '爸爸', '妈妈', '其他'];
        return $map[$value];
    }

    //学生家长绑定的openid
    public function getFirstOpenidAttr($value, $data)
    {
        if (isset($data['first_uid']) && $data['first_uid'] > 0) {
            $user_info = User::get(function ($query) use ($data) {
                $query->where('uid', $data['first_uid'])->field('openid');
            });
            if (!empty($user_info)) return $user_info['openid'];
        }
        return '';
    }

    //学生家长绑定的openid
    public function getSecondOpenidAttr($value, $data)
    {
        if (isset($data['second_uid']) && $data['second_uid'] > 0) {
            $user_info = User::get(function ($query) use ($data) {
                $query->where('uid', $data['second_uid'])->field('openid');
            });
            if (!empty($user_info)) return $user_info['openid'];
        }
        return '';
    }

    public function getSchoolGradeAttr($value, $data)
    {
        $grade = intval($value);

        if ($grade <> 0 && isset($data['grade_update_int_ym'])) {

            $grade = get_real_grade($grade, $data['grade_update_int_ym']);
        }
        return $grade;
    }

    public function getRefererStudentNameAttr($value, $data)
    {
        if (!isset($data['referer_sid']) || !$data['referer_sid']) {
            return '-';
        }
        return get_student_name($data['referer_sid']);
    }

    public function getMoneyAttr($value, $data)
    {
        return format_currency($value);
    }

    public function orders()
    {
        return $this->hasMany('Order', 'sid', 'sid');
    }

    public function classes()
    {
        return $this->belongsToMany('Classes', 'class_student', 'cid', 'sid');
    }

    public function user()
    {
        return $this->belongsToMany('User', 'user_student', 'uid', 'sid');
    }

    public function firstUser()
    {
        return $this->belongsTo('User', 'first_uid', 'uid')
            ->field(['uid', 'account', 'mobile', 'email', 'name', 'sex', 'openid', 'avatar', 'status', 'login_times']);
    }

    public function secondUser()
    {
        return $this->belongsTo('User', 'second_uid', 'uid')
            ->field(['uid', 'account', 'mobile', 'email', 'name', 'sex', 'openid', 'avatar', 'status', 'login_times']);
    }

    public function branch()
    {
        return $this->belongsTo('Branch', 'bid', 'bid');
    }

    /*一对一，一对多排课*/
    public function courseArrange()
    {
        return $this->belongsToMany('CourseArrange', 'course_arrange_student', 'ca_id', 'sid');
    }

    public function studentLesson()
    {
        return $this->hasMany('StudentLesson', 'sid', 'sid');
    }

    //学员回访记录
    public function studentReturnVisit()
    {
        return $this->hasMany('StudentReturnVisit', 'sid', 'sid');
    }

    public function classStudents($time = null)
    {
        if (empty($time)) {
            $time = \request()->time();
        }
        $int_day = int_day($time);
        return $this->hasMany('ClassStudent', 'sid', 'sid')->where('status', 1)->where('in_time', '<=', $int_day)->where(function ($query) use ($int_day) {
            $query->where('out_time', 0)->whereOr('out_time', '<', $int_day);
        });
//            ->with(['cls' => function ($query) use ($int_day) {
//            $query->with(['course_arranges' => function($query) use ($int_day) {
//                $query->where('int_day', $int_day);
//            }]);
//        }]);
    }

    /*获取某个同学在某一天的班课的排课*/
    public function classCourseArrange($time = null)
    {
        if (empty($time)) {
            $time = \request()->time();
        }
        $int_day = int_day($time);
        $cid_array = $this->classStudents($time)->column('cid');
        if (empty($cid_array)) {
            return [];
        }
        $w = [];
        $w['cid'] = ['in', $cid_array];
        $w['int_day'] = $int_day;
        return CourseArrange::all($w);
    }

    /*在读课程*/
    public function studyingLessons($int_day = null)
    {
        $w_lesson_status = ['lesson_status' => ['LT', StudentLesson::LESSON_STATUS_DONE]];
        return $this->hasMany('StudentLesson', 'sid', 'sid')->where($w_lesson_status);
    }

    /*停课课程*/
    public function stopingLessons($int_day = null)
    {
        return $this->hasMany('StudentLesson', 'sid', 'sid')->where(['is_stop' => 1, 'lesson_status' => 1]);
    }

    /**
     * 根据输入参数格式化订单输入参数
     * @param $input
     */
    protected function format_order_input($input)
    {
        $order = [
            'student' => [],
            'order' => [
                'sdc_id' => 0,
                'items' => [],      //订单条目
                'payment' => []       //付款
            ],
            'salesman' => []           //业绩
        ];

        $order['student']['sid'] = $this->getData('sid');
        $order['order']['is_submit'] = 1;
        $order['order']['is_debit'] = 1;
        $order['order']['balance_paid_amount'] = 0;
        $order['order']['money_pay_amount'] = $input['amount'];
        $order['order']['money_paid_amount'] = 0;
        $order['order']['order_amount'] = $input['amount'];
        $order['order']['order_discount_amount'] = 0;
        $order['order']['order_reduced_amount'] = 0;
        $order['order']['origin_amount'] = $input['amount'];
        $order['order']['remark'] = $input['remark'];


        if (isset($input['paid_time'])) {
            $order['order']['paid_time'] = $input['paid_time'];
        } else {
            if (isset($input['buy_int_day'])) {
                $order['order']['paid_time'] = int_day_to_date_str($input['buy_int_day']);
            } else {
                $order['order']['paid_time'] = date('Y-m-d', time());
            }
        }

        array_push($order['order']['items'], [
            'gtype' => OrderItem::GTYPE_DEBIT,
            'dc_id' => $input['dc_id'],
            'nums' => 1,
            'origin_price' => $input['amount'],
            'price' => $input['amount'],
            'origin_amount' => $input['amount'],
            'subtotal' => $input['amount'],
            'paid_amount' => $input['amount'],
            'expire_time' => int_day_to_timestamp($input['expire_int_day']),
            'c_start_int_day'   => isset($input['c_start_int_day'])?$input['c_start_int_day']:0,
            'consume_type'   => isset($input['consume_type'])?$input['consume_type']:0
        ]);

        if (isset($input['payment'])) {
            foreach ($input['payment'] as $payment) {
                array_push($order['order']['payment'], [
                    'aa_id' => $payment['aa_id'],
                    'pay_amount' => $payment['amount'],
                    'pay_status' => true
                ]);
            }
        } else {
            array_push($order['order']['payment'], [
                'aa_id' => $input['aa_id'],
                'pay_amount' => $input['amount'],
                'pay_status' => true
            ]);
        }


        if (isset($input['salesman']) && !empty($input['salesman'])) {
            $order['salesman'] = $input['salesman'];
        }
        return $order;
    }

    /**
     * 储值操作
     * @param $input
     * @param int $sid
     */
    public function addMoney($input)
    {
        $need_fields = ['dc_id', 'debit_type', 'remark'];

        if (!$this->checkInputParam($input, $need_fields)) {
            return false;
        }

        if (isset($input['payment'])) {
            if (!is_array($input['payment']) ) {
                return $this->input_param_error('payment');
            }
        } else {
            $need_fields = ['amount', 'aa_id'];
            if (!$this->checkInputParam($input, $need_fields)) {
                return false;
            }
        }

        $input['amount'] = floatval($input['amount']);
        $sid = $this->getData('sid');

        if (!isset($input['expire_int_day'])) {
            $input['expire_int_day'] = 0;
        }else{
            $input['expire_int_day'] = format_int_day($input['expire_int_day']);
        }

        if(!isset($input['c_start_int_day'])){
            $input['c_start_int_day'] = int_day(time());
        }else{
            $input['c_start_int_day'] = format_int_day($input['c_start_int_day']);
        }

        if (!isset($input['buy_int_day'])) {
            $input['buy_int_day'] = int_day(time());
        }else{
            $input['buy_int_day'] = format_int_day($input['buy_int_day']);
        }

        if ((isset($input['aa_id']) && $input['aa_id'] == 0) || empty($input['payment'])) {

            $param_student_signup = user_config('params.student_signup');
            $enable_debit_without_aa_id = $param_student_signup['enable_debit_without_aa_id'];
            if(!$enable_debit_without_aa_id){
                return $this->user_error('系统设置为禁用"未收款储值",您必须选择收款账号才能进行储值操作！');
            }
            $mSmh = new StudentMoneyHistory();
            $result = $mSmh->addStudentMoney(
                $sid,
                $input['amount'],
                $input['dc_id'],
                $input['expire_int_day'],
                $input['remark'],
                $input['buy_int_day'],
                0,
                $input['c_start_int_day'],
                $input['consume_type']
            );
            if (!$result) {
                return $this->user_error($mSmh->getError());
            }
        } else {
            $order_input = $this->format_order_input($input);
            $m_order = new Order();
            $result = $m_order->createOrder($order_input);
            if (!$result) {
                return $this->user_error($m_order->getError());
            }

            $result = gvar('ret');
        }

        return $result;

        /*
        if(empty($input['dc_id'])) {
            if(empty($input['amount'])){
                return $this->user_error('金额输入有误!');
            }

            $remark = empty($input['remark'])?'手动充值':$input['remark'];

            $change_data = [
                'money'  => $input['amount'],
                'remark' => $remark,
                'business_type' => \app\api\model\StudentMoneyHistory::BUSINESS_TYPE_RECHARGE,
            ];

            $rs = $this->changeMoney($change_data);
            if($rs === false) {
                return false;
            }
            $ret['smh_id'] = $rs;
        } else {
            $m_sdc = new StudentDebitCard();
            $result = $m_sdc->addCard($input);
            if($result === false) {
                return $this->user_error($m_sdc->getErrorMsg());
            }
            $data['sdc_id'] = $result['sdc_id'];
            $data['smh_id'] = $result['smh_id'];
        }
        return $ret;
        */
    }

    //电子钱包变动
    public function changeMoney(Student $student, $change_data)
    {

        if (!isset($change_data['money']) || abs(floatval($change_data['money'])) == 0) {
            return $this->user_error('缺少数额');
        }

        $this->startTrans();
        try {
            $mSmh = new StudentMoneyHistory();

            $data = [
                'business_type' => isset($change_data['business_type']) ? $change_data['business_type'] : 0,
                /*
                 * BUSINESS_TYPE_ORDER：business_id是订单id
                 * BUSINESS_TYPE_SUPPLEMENT: business_id是orb_id
                 * BUSINESS_TYPE_TRANSFORM: business_id 是结转 ot_id
                 * BUSINESS_TYPE_REFUND: business_id 是退款 or_id
                */
                'business_id' => isset($change_data['business_id']) ? $change_data['business_id'] : 0,
                'bid' => $student->bid,
                'sid' => $student->sid,
                'amount' => abs($change_data['money']),
                'before_amount' => $student->money,
                'after_amount' => $student->money + $change_data['money'],
                'remark' => isset($change_data['remark']) ? $change_data['remark'] : '',
                'sdc_id' => isset($change_data['sdc_id']) ? $change_data['sdc_id'] : 0,
            ];

            $rs = $mSmh->createMoneyHistory($data);
            if (!$rs) exception($mSmh->getError());

            if ($change_data['money'] >= 0) {
                $rs = $student->setInc('money', $change_data['money']);
            } else {
                $reduce_money = abs($change_data['money']);
                if ($student->money == $reduce_money && $student->getData('money') < $reduce_money) {
                    $reduce_money = $student->getData('money');
                }
                $rs = $student->setDec('money', $reduce_money);
            }
            if (!$rs) exception('电子钱包变动失败');

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();

        return true;
    }

    // 撤回退费课时返回
    public function backLesson(Student $student, $num)
    {

        if (!isset($num) || abs(floatval($num) == 0)) {
            return $this->user_error('缺少返还课程数');
        }
        $data = [];

        $data = [
            'student_lesson_hours' => $student['student_lesson_hours'] + $num,
            'student_lesson_remain_hours' => $student['student_lesson_remain_hours'] + $num,
        ];
        $w['sid'] = $student['sid'];
        $result = $this->save($data,$w);
        if (false === $result) {
            return $this->sql_save_error('student');
        }
        return true;
    }

    /**
     * 撤销结转课时
     * @param StudentLesson $studentlesson
     * @param $num
     * @param $present_nums
     */
    public function undoTransferLesson(Student $student,$num,$present_nums = 0)
    {
        if(!isset($num) || abs(floatval($num) == 0)) {
            return $this->user_error('缺少撤销结转课时数量');
        }
        $data = [
            'student_lesson_hours' => $student['student_lesson_hours'] + $num + $present_nums,
            'student_lesson_remain_hours' => $student['student_lesson_remain_hours'] + $num + $present_nums,
        ];

        $w['sid'] = $student['sid'];
        $result = $this->save($data,$w);
        if (false === $result){
            return $this->sql_save_error('student');
        }

        return true;
    }

    /**
     * 创建单个学员档案
     * @param $data
     * @param bool $check_num_limit 是否检查数量限制
     * @return bool|mixed
     */
    public function createOneStudent($data, $check_num_limit = true, $create_center_referer = true)
    {
        /*
        if($check_num_limit) {
            if (self::isOverStudentNum()) return $this->user_error('学员数量已经超过限制');
        }*/
        if($check_num_limit) {
            if (is_client_overflow('student')) {
                $client = gvar('client.info');
                $current_nums = get_client_current_nums($client, 'student');
                $limit_nums = $client['student_num_limit'];
                return $this->user_error('学员数量已经超过许可限制!' . $current_nums . '/' . $limit_nums);
            }
        }

        if ($create_center_referer) {
            gvar('not_create_center_referer', false);
        } else {
            gvar('not_create_center_referer', true);
        }
        $this->startTrans();
        try{
            $rs = $this->data([])->validate(true)->allowField(true)->isUpdate(false)->save($data);
            if($rs === false){
                $this->rollback();
                return $this->sql_add_error('student');
            }

            $sid = $this->getAttr('sid');
            if (isset($data['referer_sid']) && $data['referer_sid'] > 0){
                $mStudentReferer = new StudentReferer();
                $result = $mStudentReferer->createStudentReferer($sid,$data['referer_sid']);
                if (false === $result) {
                    $this->rollback();
                    return $this->user_error($mStudentReferer->getError());
                }
            }

            // 学员添加日志
            StudentLog::addStudentInsertLog($sid);

        }catch(\Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();

        return $sid;
    }

    /**
     * 解封学员
     */
    public function unseal(){
        if (is_client_overflow('student')) {
            $client = gvar('client.info');
            $current_nums = get_client_current_nums($client, 'student');
            $limit_nums = $client['student_num_limit'];
            return $this->user_error('学员数量已经超过许可限制!' . $current_nums . '/' . $limit_nums);
        }
        $this->status = Student::STATUS_NORMAL;
        $result = $this->save();
        if(false === $result){
            return $this->sql_save_error('student');
        }
        return true;
    }

    //帐户数量是否超过限制
    public static function isOverStudentNum()
    {
        $self = new self();

        $client_info = gvar('client.info');
        if ($client_info['og_id'] > 0) {
            $parent_client = db('client', 'center_database')->where('cid', $client_info['parent_cid'])->find();

        } else {
            $parent_client = $client_info;
        }

        if ($parent_client['student_num_limit'] == 0) return false;
        $self->skip_og_id_condition = true;
        $client_total_student_num = $self->where('status', 'lt', self::STATUS_QUIT)->count();
        if ($client_total_student_num >= $parent_client['student_num_limit']) return true;

        $self->skip_og_id_condition = false;
        $org_total_student_num = $self->where('status', 'lt', self::STATUS_QUIT)->count();

        $org_student_num_limit = !empty($client_info) ? $client_info['student_num_limit'] : 0;
        //数量为0是无限制
        if ($org_student_num_limit > 0 && $org_total_student_num >= $org_student_num_limit) return true;

        $og_id = gvar('og_id');
        $org = Org::get($og_id);
        if (empty($org)) return false;

        if ($org['student_num_limit'] === 0) return false;

        return false;
    }

    /**
     * 获取某个学生在[某一天]的所有排课记录,包括班课和一对一，一对多的排课记录,补课的排课记录
     * @param string $time
     * @return array
     */
    public function getCourseArrangeByDay($time = '')
    {
        if (empty($time)) {
            $time = request()->time();
        } elseif (!is_numeric($time)) {
            $time = strtotime($time);
        }
        $int_day = int_day($time);
        $sid = $this->getData('sid');
        $list = [];

        /*获取班课排课记录*/
        $list['class_course_arrange'] = [];
        $cids = [];
        $class_student_list = (new ClassStudent)->where('sid', $sid)->select();
        foreach ($class_student_list as $key => $item) {
//            if ($item instanceof ClassStudent && $item->checkAvailableForAttendance($int_day)) {
            $cids[] = $item['cid'];
//            }
        }
        if (!empty($cids)) {
            $list['class_course_arrange'] = (new CourseArrange)->whereIn('cid', $cids)->where('int_day', $int_day)->select();
        }

        /*获取非班课的排课*/
        $list['not_class_course_arrange'] = [];
        $student_lesson_list = (new StudentLesson())->where('sid', $sid)->select();
        unset($key, $item);
        $lids = [];
        foreach ($student_lesson_list as $key => $item) {
//            if ($item instanceof StudentLesson && $item->checkAvailableForAttendance($int_day)) {
            $lids[] = $item['lid'];
//            }
        }
        if (!empty($lids)) {
            $ca_ids = CourseArrangeStudent::where('sid', $sid)
                ->whereIn('lid', $lids)
                ->where('int_day', $int_day)
                ->column('ca_id');
            if (!empty($ca_ids)) {
                $list['not_class_course_arrange'] = CourseArrange::whereIn('ca_id', $ca_ids)->select();
            }
        }
        /*获取补课的排课*/
        $list['makeup_course_arrange'] = [];
        $makeup_ca_ids = MakeupArrange::where(['sid' => $sid, 'int_day' => $int_day])->column('ca_id');
        if ($makeup_ca_ids) {
            $list['makeup_course_arrange'] = CourseArrange::all($makeup_ca_ids);
        }

        /*返回合并后的排课记录*/
        $list = array_merge($list['class_course_arrange'], $list['not_class_course_arrange'], $list['makeup_course_arrange']);
        if (empty($list) || count($list) == 1) {
            return $list;
        }

        /*返回排序按照[int_start_hour]排序后的数组*/
        usort($list, function ($a, $b) {
            if ($a['int_start_hour'] == $b['int_start_hour']) {
                return 0;
            }
            return $a['int_start_hour'] < $b['int_start_hour'] ? -1 : 1;
        });
        return $list;
    }

    /**
     * 通过考勤卡的卡号获取学生模型
     * @param $card_no
     * @return null|static
     * @throws Exception
     */
    public static function getStudentByCardNo($card_no)
    {
        if (empty($card_no)) {
            throw new Exception('param card_no is required');
        }
        $model = self::get(['card_no' => $card_no]);
        if (empty($model)) {
            throw new Exception('没有查询到card_no：' . $card_no . '对应的学生信息');
        }
        return $model;
    }

    /**
     * 通过卡号获取学生
     * @param [type] $card_no [description]
     */
    public static function GetByCardNo($card_no)
    {
        if (empty($card_no)) {
            exception('卡号为空');
        }
        $w['og_id'] = gvar('og_id');
        $w['card_no'] = $card_no;
        $model = self::get($w);
        if (!$model) {
            exception('卡号不存在!');
        }
        return $model;
    }

    /**
     * 通过人脸获取学生
     * @param [type] $card_no [description]
     */
    public static function GetByFaceId($face_id)
    {
        if (empty($face_id)) {
            exception('FACEID为空');
        }
        $w['og_id'] = gvar('og_id');
        $w['face_id'] = strval($face_id);
        $m = new self();
        $model = $m->where($w)->find();
        if (!$model) {
            exception('FACEID不存在!');
        }

        return $model;
    }

    /**
     * 获得今天的排课列表
     * @return [type] [description]
     */
    public function getTodayCourseArranges()
    {
        $today_int_day = int_day(time());
        return $this->getIntdayCourseArranges($today_int_day);
    }

    /**
     * 根据int_day获得所有排课记录
     * @param  [type] $int_day [description]
     * @return [type]          [description]
     */
    public function getIntdayCourseArranges($int_day)
    {
        $ca_list = [];
        $sid = $this->getData('sid');
        //先查1对1或1对多的排课列表
        $w_cas['sid'] = $sid;
        $w_cas['int_day'] = $int_day;

        $cas_list = $this->m_course_arrange_student->where($w_cas)->select();

        if ($cas_list) {
            $ca_ids = [];
            foreach ($cas_list as $cas) {
                array_push($ca_ids, $cas->ca_id);
            }
            $w_ca['ca_id'] = ['IN', $ca_ids];
            $m_ca_list = $this->m_course_arrange->where($w_ca)->select();
            foreach ($m_ca_list as $ca) {
                array_push($ca_list, $ca->getData());
            }
        }

        //再查班课
        $w_cs['sid'] = $sid;
        $w_cs['status'] = 1;
        $w_cs['is_end'] = 0;

        $cids = [];
        $cs_list = $this->m_class_student->where($w_cs)->select();
        if ($cs_list) {
            foreach ($cs_list as $cs) {
                if (!in_array($cs->cid, $cids)) {
                    array_push($cids, $cs->cid);
                }
            }
        }

        if (count($cids) > 0) {
            $w_ca = [];
            $w_ca['cid'] = ['IN', $cids];
            $w_ca['int_day'] = $int_day;

            $m_ca_list = $this->m_course_arrange->where($w_ca)->select();
            if ($m_ca_list) {
                foreach ($m_ca_list as $ca) {
                    array_push($ca_list, $ca->getData());
                }
            }
        }

        if (count($ca_list) > 0) {
            $ca_list = list_sort_by($ca_list, 'int_start_hour');
        }

        return $ca_list;
    }

    /**
     * 获得按时间计费的所有课时记录
     * @return [type] [description]
     */
    public function getDateExpireLessonHour()
    {
        $sid = $this->getData('sid');
        $now_time = time();
        $w_sh['sid'] = $sid;
        $w_sh['lesson_status'] = ['LT', 2];
        $w_sh['expire_time'] = ['EGT', $now_time];

        $m_sh = null;

        $m_sh_list = $this->m_student_lesson->where($w_sh)->select();

        if ($m_sh_list) {
            foreach ($m_sh_list as $sh) {
                $w_l['lid'] = $sh->lid;
                $lesson = $this->m_lesson->where($w_l)->cache(60)->find();
                if ($lesson && $lesson->price_type == 3) {
                    $m_sh = $sh;
                    break;
                }
            }
        }

        return $m_sh;
    }

    /**
     * 根据科目ID获取学员的Student_lesson记录
     * @param  CourseArrange $ca [description]
     * @return [type]            [description]
     */
    public function getStudentLessonBySjId($sj_id, $sid = 0)
    {
        $ret['remain_lesson_hours'] = 0;
        $ret['lesson_hours'] = 0;
        $ret['sj_id'] = $sj_id;
        if ($sid == 0) {
            $sid = $this->getData('sid');
        }

        $w_sl['sid'] = $sid;
        $w_sl['lesson_status'] = ['LT', 2];
        $sl_list = $this->m_student_lesson->where($w_sl)->where("find_in_set($sj_id,sj_ids)")->select();

        if (!$sl_list) {
            $this->m_student_lesson->fixStudentLessonSjIds($sid);
            $sl_list = $this->m_student_lesson->where($w_sl)->where("find_in_set($sj_id,sj_ids)")->select();
        }
        if ($sl_list) {
            foreach ($sl_list as $sl) {
                $ret['remain_lesson_hours'] += $sl['remain_lesson_hours'];
                $ret['lesson_hours'] += $sl['lesson_hours'];
            }
        }

        return $ret;
    }

    public function getStudentLessonByCaId(CourseArrange $ca)
    {
        $sid = $this->getData('sid');
        $lid = $ca['lid'];
        $w = [];
        $w['sid'] = $sid;
        $w['lid'] = $lid;
        $w['lesson_status'] = ['LT', 2];
        $model = StudentLesson::get($w);
        if (empty($model)) {
//            throw new \RuntimeException('resource not found');
            return null;
        }
        return $model;
    }

    /**
     * 关注并且绑定公众号的二维码
     * @return string
     */
    public function getWechatQrcode()
    {
        $data = [];
        $data['cid'] = Request::instance()->client['cid'];
        $data['bid'] = $this->getData('bid');
        $data['og_id'] = $this->getData('og_id');
        $data['uid'] = input('uid/d');
        $user_list = $this->getAttr('user');
        if (empty($user_list)) {
            $user_list = User::createStudentUserAfterCreateStudent($this);
        }
        if (empty($data['uid'])) {
            $data['uid'] = $user_list[0]['uid'];
        } else {
            $flag = false;
            foreach ($user_list as $item) {
                if ($data['uid'] == $item['uid']) {
                    $flag = true;
                }
            }
            if (!$flag) {
                return '学生信息和uid不匹配!';
            }
        }
        $app = Wechat::getApp($this);
        $qrcode = $app->qrcode;
        $result = $qrcode->temporary(json_encode($data), 30 * 24 * 3600);
        $ticket = $result->ticket;
        $url = $qrcode->url($ticket);
        return $url;
    }

    public function updateStudentInfo($data)
    {
        $rule = [
            'student_name|学生姓名' => 'require|max:25',
        ];
        $msg = [
            'second_tel.different' => '第二联系人电话与第一联系人电话不能重复！',
        ];
        $validate = new Validate($rule, $msg);
        if (!$validate->check($data)) {
            return $this->user_error($validate->getError());
        }
        // 获取学员信息改变的值
        $old_data = get_student_info($data['sid']);
        $extra_param = get_array_diff_value($old_data,$data);

        $sinfo = $this->getData();

        if (!empty($sinfo['second_tel']) && (isset($data['second_tel']) && empty($data['second_tel']))) {
            return $this->user_error('已经设置了的第二联系人不能修改为空！');
        }

        if (isset($data['school_grade']) && $data['school_grade'] <> $sinfo['school_grade']) {
            $data['grade_update_int_ym'] = date('Ym', time());
        }
        // 如果没有权限查看电话号码 就不让编辑号码
        $showalltel = request()->user->hasPer('student.showalltel');
        if (!$showalltel){
            unset($data['first_tel']);
            if (!empty($data['second_tel'])){
                unset($data['second_tel']);
            }
        }
        
        $this->startTrans();
        try {
            /*if (!isset($data['second_tel']) && isset($data['card_no']) && !empty($data['card_no'])) {
                if ($data['card_no'] != $sinfo['card_no']) {
                    //发卡更新卡号
                    $this->card_no = $data['card_no'];
                    $result = $this->save();
                    return true;
                }
            }*/
            
            $sid = $this->getData('sid');
            $og_id = $this->getData('og_id');
            $first_uid = $this->getData('first_uid');
            $second_uid = $this->getData('second_uid');
            
            /*student记录的first_tel和second_tel 就是家长账号的account*/
            if (!empty($first_uid)) {
                $user_info = get_user_info($first_uid);
                if (!$user_info) {
                    db('user_student')->where('sid', $sid)->where('uid', $first_uid)->delete();
                    /*添加新账号*/
                    $info = [];
                    $info['account'] = $data['first_tel'];
                    $info['password'] = substr($data['first_tel'], -6, 6);
                    $info['og_id'] = $og_id;
                    if (!empty($data['first_family_name'])) {
                        $info['name'] = $data['first_family_name'];
                    } elseif ($data['first_family_rel'] == 1) {
                        $info['name'] = $this->getData('student_name');
                    }

                    $info['mobile'] = $data['first_tel'];
                    $info['user_type'] = 2;
                    $info['default_sid'] = $sid;
                    $first_user = User::create($info);
                    $this->data('first_uid', $first_user['uid']);
                    $data['first_uid'] = $first_user['uid'];
                    $this->data('first_tel', $data['first_tel']);
                    $first_user->students()->attach($sid);
                }
            }
            if (empty($first_uid) && !empty($data['first_tel'])) {
                $w = [];
                $w['user_type'] = User::STUDENT_ACCOUNT;
                $w['account'] = $data['first_tel'];
                $first_user = User::get($w);
                if (empty($first_user)) {
                    /*添加新账号*/
                    $info = [];
                    $info['account'] = $data['first_tel'];
                    $info['password'] = substr($data['first_tel'], -6, 6);
                    $info['og_id'] = $og_id;
                    if (!empty($data['first_family_name'])) {
                        $info['name'] = $data['first_family_name'];
                    } elseif ($data['first_family_rel'] == 1) {
                        $info['name'] = $this->getData('student_name');
                    }

                    $info['mobile'] = $data['first_tel'];
                    $info['user_type'] = 2;
                    $info['default_sid'] = $sid;
                    $first_user = User::create($info);
                }
                $this->data('first_uid', $first_user['uid']);
                $data['first_uid'] = $first_user['uid'];
                $this->data('first_tel', $data['first_tel']);
                $first_user->students()->attach($sid);

            };

            if (empty($second_uid) && !empty($data['second_tel'])) {
                $w = [];
                $w['user_type'] = User::STUDENT_ACCOUNT;
                $w['account'] = $data['second_tel'];
                $second_user = User::get($w);
                if (empty($second_user)) {
                    /*添加新账号*/
                    $info = [];
                    $info['account'] = $data['second_tel'];
                    $info['password'] = substr($data['second_tel'], -6, 6);
                    $info['og_id'] = $og_id;
                    if (!empty($data['second_family_name'])) {
                        $info['name'] = $data['second_family_name'];
                    } elseif ($data['second_family_rel'] == 1) {
                        $info['name'] = $this->getData('student_name');
                    }

                    $info['mobile'] = $data['second_tel'];
                    $info['user_type'] = 2;
                    $info['default_sid'] = $sid;
                    $second_user = User::create($info);
                }
                $this->data('second_uid', $second_user['uid']);
                $data['second_uid'] = $second_user['uid'];
                $this->data('second_tel', $data['second_tel']);
                $second_user->students()->attach($sid);
            };

            /*上面可以根据学生信息来创建家长账号，下面用来处理学生的联系电话发生变化[first_tel, second_tel]*/

            $first_uid = $this->getData('first_uid');
            $first_tel = $this->getData('first_tel');
            if (!empty($first_uid) && !empty($data['first_tel']) && $first_tel !== $data['first_tel']) {
                if (empty($data['type']) || !in_array($data['type'], ['single', 'all'])) {
                    throw new Exception('此处无法修改联系人电话');
                }
                $first_user = User::get($first_uid);
                if (empty($first_user)) {
                    throw new Exception('first_uid对应的用户不存在,uid:' . $first_uid);
                }

                $student_list = $first_user['students'];
                if (count($student_list) > 1) {
                    $multi = true;
                } else {
                    $multi = false;
                }
                $w = [];
                $w['user_type'] = User::STUDENT_ACCOUNT;
                $w['account'] = $data['first_tel'];
                $user = User::get($w); /*表示新手机号码代表的user*/
                if (!$multi) {
                    /*该账号只绑定了一个学员*/
                    if (empty($user)) {
                        //新手机号没有被注册 则直接更新原来的账号的account字段.//todo 密码
                        $first_user->data('account', $data['first_tel'])->data('mobile', $data['first_tel'])->save();
                    } else {
                        //新手机号已被注册  把该学生关联到新手机号已被注册的账户上
                        $first_user->students()->detach([$sid]);

                        $user->students()->attach($sid, ['og_id' => $og_id]);
                        $this->data('first_uid', $user['uid']);
                        $data['first_uid'] = $user['uid'];
                        //openid相关这里不考虑了
                    }
                } else {
                    /*该账号绑定了多个学员*/
                    if (empty($user)) {
                        if ($data['type'] === 'single') {
                            /*只修改当前学生*/
                            /*给当前学生单独创建一个新账号, 并且与老账号取消关联*/
                            $first_user->students()->detach($sid);
                            $this->data('first_tel', $data['first_tel']);

                            /*添加新账号*/
                            $info = [];
                            $info['account'] = $data['first_tel'];
                            $info['password'] = substr($data['first_tel'], -6, 6);
                            $info['og_id'] = $og_id;
                            if (!empty($data['first_family_name'])) {
                                $info['name'] = $data['first_family_name'];
                            } elseif ($data['first_family_rel'] == 1) {
                                $info['name'] = $this->getData('student_name');
                            }

                            $info['mobile'] = $data['first_tel'];
                            $info['user_type'] = 2;
                            $info['default_sid'] = $sid;
                            $new_user = User::create($info);
                            if ($new_user instanceof User) {
                                $this->data('first_uid', $new_user['uid']);
                                $data['first_uid'] = $new_user['uid'];
                                $new_user->students()->attach($sid, ['og_id' => $og_id]);
                            }
                        } else {
                            /*修改所有该账号关联的学生的 first_tel|second_tel*/
                            foreach ($student_list as $item) {
                                if (empty($item['first_uid'])) {/*正常情况first_uid肯定是有值的*/
                                    $item['first_uid'] = $first_user['uid'];
                                }
                                if ($item['first_uid'] == $first_user['uid']) {
                                    $item->data('first_tel', $data['first_tel']);
                                }
                                if ($item['second_uid'] == $first_user['uid']) {
                                    $item->data('second_tel', $data['first_tel']);
                                }
                                $item->save();
                            }
                            //新手机号没有被注册 则直接更新原来的账号的account,mobile字段.//todo 密码
                            $first_user->data('account', $data['first_tel'])->data('mobile', $data['first_tel'])->save();
                        }
                    } else {
                        //新手机号已被注册 把该学生关联到新手机号已被注册的账户上
                        if ($data['type'] === 'single') {
                            /*
                             * 1.解除与老账号的关联
                             * 2.创建与新手机号已被注册的账号的关联
                             * 3.老账号留着不变
                             * */
                            $first_user->students()->detach($sid);
                            $this->data('first_uid', $user['uid']);
                            $data['first_uid'] = $user['uid'];
                            $user->students()->attach($sid, ['og_id' => $og_id]);
                        } else {
                            /**
                             * 1.解除所有学生与老账号的关联
                             * 2.创建所有学生与新手机号已被注册的账号的关联
                             * 3.老账号留着不变
                             */
                            foreach ($student_list as $item) {
                                if (!$item instanceof Student) {
                                    throw new Exception('pass');
                                }
                                $first_user->students()->detach($item['sid']);
                                $user->students()->attach($item['sid'], ['og_id' => $og_id]);
                                $item->data('first_uid', $user['uid']);
                                $data['first_uid'] = $user['uid'];
                                $item->data('first_tel', $data['first_tel']);
                                $item->save();
                            }
                        }
                    }
                }
            }

            $second_uid = $this->getData('second_uid');
            $second_tel = $this->getData('second_tel');
            if (!empty($second_uid) && !empty($data['second_tel']) && $second_tel !== $data['second_tel']) {
                if (empty($data['type']) || !in_array($data['type'], ['single', 'all'])) {
                    throw new Exception('此处无法修改联系人电话');
                }
                $second_user = User::get($second_uid);
                if (empty($second_user)) {
                    throw new Exception('second_uid对应的用户不存在,uid:' . $second_uid);
                }

                $student_list = $second_user['students'];
                if (count($student_list) > 1) {
                    $multi = true;
                } else {
                    $multi = false;
                }
                $w = [];
                $w['user_type'] = User::STUDENT_ACCOUNT;
                $w['account'] = $data['second_tel'];
                $user = User::get($w); /*表示新手机号码代表的user*/
                if (!$multi) {
                    /*该账号只绑定了一个学员*/
                    if (empty($user)) {
                        //新手机号没有被注册 则直接更新原来的账号的account字段.//todo 密码
                        $second_user->data('account', $data['second_tel'])->data('mobile', $data['second_tel'])->save();
                    } else {
                        //新手机号已被注册  把该学生关联到新手机号已被注册的账户上
                        $second_user->students()->detach([$sid]);

                        $user->students()->attach($sid, ['og_id' => $og_id]);
                        $this->data('second_uid', $user['uid']);
                        $data['second_uid'] = $user['uid'];
                    }
                } else {
                    /*该账号绑定了多个学员*/
                    if (empty($user)) {
                        if ($data['type'] === 'single') {
                            /*只修改当前学生*/
                            /*给当前学生单独创建一个新账号, 并且与老账号取消关联*/
                            $second_user->students()->detach($sid);
                            $this->data('second_tel', $data['second_tel']);

                            /*添加新账号*/
                            $info = [];
                            $info['account'] = $data['second_tel'];
                            $info['password'] = substr($data['second_tel'], -6, 6);
                            $info['og_id'] = $og_id;
                            if (!empty($data['second_family_name'])) {
                                $info['name'] = $data['second_family_name'];
                            } elseif ($data['second_family_rel'] == 1) {
                                $info['name'] = $this->getData('student_name');
                            }

                            $info['mobile'] = $data['second_tel'];
                            $info['user_type'] = 2;
                            $info['default_sid'] = $sid;
                            $new_user = User::create($info);
                            if ($new_user instanceof User) {
                                $this->data('second_uid', $new_user['uid']);
                                $data['second_uid'] = $new_user['uid'];
                                $new_user->students()->attach($sid, ['og_id' => $og_id]);
                            }
                        } elseif ($data['type'] === 'all') {
                            /*修改所有该账号关联的学生的 first_tel|second_tel*/
                            foreach ($student_list as $item) {
                                if (empty($item['first_uid'])) {/*正常情况first_uid肯定是有值的*/
                                    $item['first_uid'] = $second_user['uid'];
                                }
                                if ($item['first_uid'] == $second_user['uid']) {
                                    $item->data('first_tel', $data['second_tel']);
                                }
                                if ($item['second_uid'] == $second_user['uid']) {
                                    $item->data('second_tel', $data['second_tel']);
                                }
                                $item->save();
                            }
                            //新手机号没有被注册 则直接更新原来的账号的account,mobile字段.//todo 密码
                            $second_user->data('account', $data['second_tel'])->data('mobile', $data['second_tel'])->save();
                        } else {
                            throw new Exception('此处无法修改联系人电话');
                        }
                    } else {
                        //新手机号已被注册 把该学生关联到新手机号已被注册的账户上
                        if ($data['type'] === 'single') {
                            /*
                             * 1.解除与老账号的关联
                             * 2.创建与新手机号已被注册的账号的关联
                             * 3.老账号留着不变
                             * */
                            $second_user->students()->detach($sid);
                            $this->data('second_uid', $user['uid']);
                            $data['second_uid'] = $user['uid'];
                            $user->students()->attach($sid, ['og_id' => $og_id]);
                        } else {
                            /**
                             * 1.解除所有学生与老账号的关联
                             * 2.创建所有学生与新手机号已被注册的账号的关联
                             * 3.老账号留着不变
                             */
                            foreach ($student_list as $item) {
                                if (!$item instanceof Student) {
                                    throw new Exception('pass');
                                }
                                $second_user->students()->detach($item['sid']);
                                $user->students()->attach($item['sid'], ['og_id' => $og_id]);
                                $item->data('second_uid', $user['uid']);
                                $data['second_uid'] = $user['uid'];
                                $item->data('second_tel', $data['second_tel']);
                                $item->save();
                            }
                        }
                    }
                }
            }

            $this->allowField(true)->save($data);
            $callback_user_data = $this->getData();
            $user = User::get($this->getData('first_uid'));
            if (!empty($user)) {
                $callback_user_data = array_merge($callback_user_data, $user->getData());
            }
            callback_queue_push('user_modify_callback_url', $callback_user_data);

            /*如果该学生是由customer转变而来，当更新student表的student_name,first_tel,second_tel字段时需要同步更新customer表的信息*/
            $customer = Customer::get(['sid' => $this->getData('sid')]);
            if ($customer) {
                if (isset($data['student_name'])) {
                    $data['name'] = $data['student_name'];
                }
                $customer->allowField(['name', 'first_tel', 'second_tel'])->save($data);
            }

            $this->updateLessonHours();

            if(isset($data['referer_sid'])){
                if ($data['referer_sid'] > 0){
                    $mStudentRefrere = new StudentReferer();
                    $result = $mStudentRefrere->createStudentReferer($sid,$data['referer_sid']);
                    if (false === $result) {
                        $this->rollback();
                        return $this->user_error($mStudentRefrere->getError());
                    }
                }
            }

            // 添加一条 学员信息编辑日志
            StudentLog::addStudentEditLog($extra_param,$sid);
            
        } catch (\Exception $exception) {
            $this->rollback();
            return $this->user_error($exception->getMessage());
        }

        $this->commit();
        return true;
    }

    //更新最后联络时间
    public static function updateLastAttendanceTime($sid, $time = 0)
    {
        $student = Student::get($sid);
        if ($student['last_attendance_time'] < $time) {
            $student->last_attendance_time = $time;
            $rs = $student->save();
            if ($rs === false) throw new FailResult('更新最后联络时间失败');
        }

        return true;
    }

    /**
     * 给一个学生批量停课
     * @param array $sl_id
     */
    public function stopMultiLesson(array $info)
    {
        $this->startTrans();
        $sid = $this->getData('sid');
        try {
            $w = [];
            $w['sid'] = $sid; /*不要省略*/
            foreach ($info as $item) {
                $w['sl_id'] = $item['sl_id'];
                $m_sl = StudentLesson::get($w);
                if (empty($m_sl)) {
                    throw new Exception('参数错误！sl_id:' . $item['sl_id']);
                }

                //添加停课记录
                $m_ss = new StudentSuspend;
                $m_ss->addStudentSuspendLog($item, $this);

                // 停课操作
                $rs = $m_sl->stop($item, $this);
                if ($rs == false) {
                    exception($m_sl->getError());
                }
            }
            $this->commit();
            return true;
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
    }

    /**
     * 给一个学生批量复课
     * @param array $info
     */
    public function recoverMultiLesson(array $info)
    {
        $sid = $this->getData('sid');
        $w = [];
        $w['sid'] = $sid;
        $this->startTrans();
        try {
            foreach ($info as $item) {
                $w['sl_id'] = $item['sl_id'];
                $student_lesson = StudentLesson::get($w);
                if ($student_lesson['lesson_status'] == StudentLesson::LESSON_STATUS_DONE) {
                    throw new Exception('该学生的课程已结课！');
                }
                $rs = $student_lesson->recoverLesson($item, $this);
                if (!$rs) {
                    exception($student_lesson->getError());
                }
            }

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    /**
     * 休学
     */
    public function suspend(array $info)
    {
        $now_int_day = intval(date('Ymd', time()));
        $stop_int_day = intval(format_int_day($info['suspend_date']));
        $stop_remark = safe_str($info['suspend_reason']);
        $recover_int_day = isset($info['back_date']) ? intval(format_int_day($info['back_date'])) : 0;
        $is_today_stop = false;
        if ($recover_int_day > 0 && $recover_int_day <= $stop_int_day) {
            return $this->user_error('复学日期必须大于休学日期');
        }

        if ($stop_int_day < $now_int_day) {
            return $this->user_error('休学日期必须是今天或今天以后的日期');
        }

        $status = $this->getData('status');


        if ($status == self::STATUS_SUSPEND) {
            $this->error = '该学生的当前状态已经是休学状态!';
            return false;
        }
        if ($status == self::STATUS_QUIT) {
            $this->error = '该学生的当前状态为退学状态,请先进行入学操作!';
            return false;
        }

        if ($stop_int_day == $now_int_day) {
            $is_today_stop = true;
        }


        $sid = $this->getData('sid');
        $bid = request()->bid;

        $is_new_stop = true;

        $this->startTrans();
        try{
            if (isset($info['sls_id'])) {
                //更新操作
                $w_sls['sls_id'] = intval($info['sls_id']);
                $sls = StudentLessonStop::get($w_sls);
                if ($sls) {
                    $is_new_stop = false;
                    $sls->stop_int_day = $stop_int_day;
                    $sls->recover_int_day = $recover_int_day;
                    $sls->stop_remark = $stop_remark;

                    $result = $sls->save();

                    if (false === $result) {
                        $this->rollback();
                        return $this->sql_save_error('student_lesson_stop');
                    }

                }
                unset($w_sls['sls_id']);
            }

            //判断是否有未结束的停课或休学记录
            if ($is_new_stop) {
                $w_sls['sid'] = $sid;
                $w_sls['bid'] = $bid;
                $w_sls['recover_int_day'] = 0;

                $exists_sls = $this->m_student_lesson_stop->where($w_sls)->find();
                if ($exists_sls) {
                    $msg = '该学生还有未复课的停课记录，无法进行休学操作!';
                    if ($exists_sls->stop_type == 1) {
                        $msg = '该学生有未复学的休学操作，无法进行休学操作!';
                    }
                    return $this->user_error($msg);
                }
                //创建休学记录

                $sls['sid'] = $sid;
                $sls['stop_type'] = 1;
                $sls['og_id'] = $this->getData('og_id');
                $sls['bid'] = $bid;
                $sls['stop_int_day'] = $stop_int_day;
                $sls['recover_int_day'] = $recover_int_day;
                $sls['stop_remark'] = $stop_remark;

                if ($is_today_stop) {
                    $sls['stop_time'] = time();
                }


                $sls_id = $this->m_student_lesson_stop->isUpdate(false)->save($sls, []);

                if (!$sls_id) {
                    $this->rollback();
                    return $this->sql_add_error('student_lesson_stop');
                }
            }

            if ($is_today_stop) {
                //如果休学日期是当天的话，更新当前学员状态
                $this->status = self::STATUS_SUSPEND;
                $result = $this->save();
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('student');
                }
            }

            // 添加休学操作日志
            StudentLog::addSuspendLog($info,$this);

        }catch(\Exception $e){
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;

    }

    /**
     * 复学
     */
    public function backToSchool(array $info)
    {
        /*复学日期默认是当前日期*/
        $now_int_day = intval(date('Ymd', time()));
        $is_today_recover = false;

        if (!isset($info['back_date']) || empty($info['back_date'])) {
            $recover_int_day = $now_int_day;
        } else {
            $recover_int_day = intval(format_int_day($info['back_date']));
        }

        $status = $this->getData('status');
        if ($status == Student::STATUS_QUIT) {
            return $this->user_error('学员当前状态为退学状态，无法复课');
        }


        $sid = $this->getData('sid');

        $w_sls['sid'] = $sid;
        $w_sls['stop_type'] = 1;
        $w_sls['expired_time'] = 0;
        $w_sls['stop_time'] = ['GT', 0];

        $sls = StudentLessonStop::get($w_sls);

        if ($recover_int_day == $now_int_day) {
            $is_today_recover = true;
        }

        $this->startTrans();
        try {
            if ($sls) {
                $sls->recover_int_day = $recover_int_day;

                if ($is_today_recover) {
                    $sls->expired_time = time();
                }

                if ($recover_int_day == $now_int_day) {
                    $sls->delete();
                } else {
                    $sls->save();
                }
            }
            if ($is_today_recover) {
                $this->data('status', self::STATUS_NORMAL)->save();
                StudentLog::addBackLog($this);
            }
            $this->commit();
            return true;
        } catch (\Exception $exception) {
            $this->rollback();
            $this->error = $exception->getMessage();
            return false;
        }
    }

    /**
     * 结课
     */
    public function closingClass(array $sl_ids)
    {
        $student_lesson = StudentLesson::whereIn('sl_id', $sl_ids)->select();

        $this->startTrans();
        try {

            foreach ($student_lesson as $item) {
                if ($item['lesson_status'] == StudentLesson::LESSON_STATUS_DONE) {
                    continue;
                }
                $rs = $item->close();
                if ($rs === false) {
                    $this->rollback();
                    $this->error = $item->getError();
                    return false;
                }
                
                if (!empty($item['cid']) && !empty($item['sid'])) {
                    $class = Classes::get($item['cid']);
                    $rs = $class->quitClass($item['sid']);
                    if ($rs === false) return $this->user_error($class->getErrorMsg());
                }

                // 学员结课 删除为考勤排课学员记录 如果是一对一的 排课记录也要删除
                $mCas = new CourseArrangeStudent;
                $course_arrange_student = $mCas->where(['sid'=>$item['sid'],'lid'=>$item['lid'],'is_attendance'=>0])->select();
                $cas = $mCas->where(['sid'=>$item['sid'],'lid'=>$item['lid']])->find();
                foreach ($course_arrange_student as $per_item) {
                    $per_item->delete(); //删除排课学员
                }

                $ca_info = get_ca_info($cas['ca_id']);
                if($ca_info['lesson_type'] == 1){ 
                    $course_arrange = CourseArrange::where(['ca_id'=>$ca_info['ca_id'],'is_attendance'=>0])->find();
                    $course_arrange->delete();  
                }
                
                // 一对一 一对多结课 直接解除学员与老师和助教的关系
                if($item['lesson_type'] > 0 ){
                    if(!empty($cas)){
                        $lid = $item['lid'];
                        if($item['lesson_type'] == 1){
                            $type = EmployeeStudent::TYPE_ONE;
                        }elseif($item['lesson_type'] ==2){
                            $type = EmployeeStudent::TYPE_MANY;
                        }
                        // 解除老师与学员的关系
                        $info = array(
                            'sid' => $item['sid'],
                            'rid' => EmployeeStudent::EMPLOYEE_TEACHER,
                            'eid' => $ca_info['teach_eid']
                        );

                        EmployeeStudent::deleteEmployeeStudentRelationship($info,$type,$lid);
                        // 解除助教与学员之间的关系
                        if($ca_info['second_eids']){
                            $second_eids = explode(',',$ca_info['second_eids']);
                            foreach ($second_eids as $eid) {
                                $info = array(
                                    'sid' => $item['sid'],
                                    'rid' => EmployeeStudent::EMPLOYEE_TA,
                                    'eid' => $eid
                                );
                                EmployeeStudent::deleteEmployeeStudentRelationship($info,$type,$lid);
                            }
                        }
                    }
                }
            }

            foreach ($sl_ids as $sl_id){
                $mOrderItem = new OrderItem();
                $order_item_list = $mOrderItem->where(['sl_id' => $sl_id])->select();
                foreach ($order_item_list as $order_item){
                   $result = $mOrderItem->update_transfer($order_item,OrderItem::LESSON_HOUR_END);
                   if (false === $result){
                       return $this->user_error($mOrderItem->getError());
                   }
                }
            }

            if (isset($this->sid)) {
                $this->updateLessonHours($this->sid);
            }


        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return true;
    }

    /**
     * 撤销结课
     * @param array $sl_ids
     */
    public function undoClosingClass(array $sl_ids)
    {
        $student_lesson = StudentLesson::whereIn('sl_id', $sl_ids)->select();

        $this->startTrans();
        try {

            foreach ($student_lesson as $item) {
                if ($item['lesson_status'] != StudentLesson::LESSON_STATUS_DONE) {
                    $lesson_name = get_lesson_name($item['lid']);
                    return $this->user_error('课程 '. $lesson_name .' 未结课');
                }

                $result = $this->undoTransferLesson($this,$item['remain_lesson_hours']);
                if ($result === false) {
                    $this->rollback();
                    return $this->user_error($this->getError());
                }

                $result = $item->undoClose();
                if ($result === false) {
                    $this->rollback();
                    return $this->user_error($item->getError());
                }

                if (!empty($item['cid']) && !empty($item['sid'])) {
                    $mClass = new Classes();
                    $rs = $mClass->joinOneStudent(['sid' => $item['sid'],'cid' => $item['cid']]);
                    if ($rs === false) return $this->user_error($mClass->getError());
                }
            }

            foreach ($sl_ids as $sl_id){
                $mOrderItem = new OrderItem();
                $order_item_list = $mOrderItem->where(['sl_id' => $sl_id])->select();
                foreach ($order_item_list as $order_item){
                    $result = $mOrderItem->update_transfer($order_item,OrderItem::LESSON_HOUR_START);
                    if (false === $result){
                        return $this->user_error($mOrderItem->getError());
                    }
                }
            }

            if (isset($this->sid)) {
                $this->updateLessonHours($this->sid);
            }


        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return true;
    }

    /**
     * 退学
     * 1.是否欠费
     * 2.是否有退费
     * 3.是否有剩余课时
     * 4.所有student_lesson结课
     */
    public function quitSchool($input)
    {
        $sid = $this->getData('sid');
        $this->startTrans();
        try {
            $w = [];
            $w['sid'] = $sid;
//            $w['lesson_status'] = ['<>', StudentLesson::LESSON_STATUS_DONE];
            $student_lesson = StudentLesson::all($w);
            foreach ($student_lesson as $item) {
                if ($item['lesson_status'] == StudentLesson::LESSON_STATUS_DONE) {
                    continue;
                }
                $rs = $item->close();
                if ($rs === false) {
                    $this->rollback();
                    $this->error = $item->getError();
                    return false;
                }
            }
            $rs = $this->allowField(true)
                ->data('status', self::STATUS_QUIT)
                ->data('quit_reason', $input['quit_reason'])
                ->save();
            if ($rs === false) {
                return false;
            }

            //添加一条学员退学日志
            StudentLog::addQuitLog($input,$this);
        } catch (\Exception $e) {
            $this->rollback();
            $this->exception_error($e);
            return false;
        }
        $this->commit();
        return true;
    }

    /**
     * 学生退学之前用于获取学生的退学信息
     * 1.是否欠费
     * 2.是否有退费
     * 3.是否有剩余课时
     */
    public function getQuitSituation()
    {
        $situation = [];
        $sid = $this->getData('sid');
        $arrearage = (new Order())->where('sid', $sid)->sum('unpaid_amount');
        if ($arrearage > 0) {
            $situation['arrearage'] = sprintf('该学员还有订单欠费未交清，欠费金额为：%s元！', $arrearage);
        }
        if ($this->getData('money') > 0) {
            $situation['e_wallet'] = sprintf('该学员电子钱包还有未使用余额，余额为：%s元！', $this->getData('money'));
        }
        $remain_lesson_hours = (new StudentLesson())->where('sid', $sid)->sum('remain_lesson_hours');
        if ($remain_lesson_hours > 0) {
            $situation['remain_lesson_hours'] = sprintf('该学员还有剩余课时未使用，课时数：%s！', $remain_lesson_hours);
        }
        return $situation;
    }

    /**
     * 入学
     */
    public function enrol()
    {
        $rs = $this->data('status', self::STATUS_NORMAL)->save();
        if ($rs === false) {
            return false;
        }
        StudentLog::addEnrolLog($this);
        return true;
    }

    public function isSuspend()
    {
        if ($this->getData('status') == self::STATUS_SUSPEND) {
            return true;
        } else {
            return false;
        }
    }

    /*学生是否已经退学*/
    public function isQuit()
    {
        if ($this->getData('status') == self::STATUS_QUIT) {
            return true;
        } else {
            return false;
        }
    }

    // 退学学员回流为客户
    public function backToCustomer($sid, $student = null)
    {
        if (is_null($student)) {
            $student = $this->find($sid);
        }

        try {
            $this->startTrans();
            $m_customer = new Customer();
            $customer = $m_customer->where('sid', $sid)->find();
            if (!empty($customer)) {
                $customer->from_sid = $sid;
                $customer->sid = 0;
                $customer->is_reg = 0;
                $rs = $customer->save();
                if ($rs === false) exception('更新客户失败');
            } else {
                $customer_data = $student->toArray();
                $customer_data['name'] = $student['student_name'];
                $customer_data['from_sid'] = $sid;
                $customer_data['sid'] = 0;
                $rs = $m_customer->allowField(true)->isUpdate(false)->save($customer_data);
                if ($rs === false) exception('添加客户失败');
            }

            StudentLog::addBackToCustomer($student);
            $this->commit();
        } catch (Exception $e) {
            $this->rollback();
            return $this->user_error($e->getMessage());
        }
        return true;
    }

    /*
     * desc: 删除学生
     * 1. accounting_account
     * 2. class_student
     * 3. course_arrange_student
     * 4. employee_student
     * 5. order
     * 6. order_item
     * 7. order_receipt_bill
     * 8. order_receipt_bill_item
     * 9. order_refund
     * 10. order_refund_item
     * 11. order_transfer
     * 12. order_transfer_item
     * 13. review
     * 14. review_student
     * 15. student
     * 16. student_absence
     * 17. student_attend_school_log
     * 18. student_attendance
     * 19. student_credit_history
     * 20. student_leave
     * 21. student_lesson
     * 22. student_lesson_hour
     * 23. student_lesson_detail
     * 24. student_lesson_stop
     * 25. student_log
     * 26. student_money_history
     * 27. student_return_visit
     * 28. student_suspend
     * 29. swiping_card_record
     * 30. tally
     * 31. trial_listen_arrange   
     */
    public function delStudent($sid, $student = null, $is_force = 0)
    {
        if (!$is_force) {

            $exist = (new CourseArrangeStudent())->where('sid', $sid)->count();
            if ($exist) return $this->user_error('有课程记录，删除不了，是否封存', self::CODE_HAVE_RELATED_DATA);

            $exist = (new Order())->where('sid', $sid)->count();
            if ($exist) return $this->user_error('有订单记录，删除不了，是否封存', self::CODE_HAVE_RELATED_DATA);

            $exist = (new ClassStudent())->where('sid', $sid)->where('status', 1)->count();
            if ($exist) return $this->user_error('有分班记录，删除不了，是否封存', self::CODE_HAVE_RELATED_DATA);

            $exist = (new StudentLesson())->where('sid', $sid)->count();
            if ($exist) return $this->user_error('有课时记录，删除不了，是否封存', self::CODE_HAVE_RELATED_DATA);

            $this->startTrans();
            try {
                $w['sid'] = $sid;
                //更新客户名单以及市场名单
                $update_cu['is_reg'] = 0;
                $update_cu['sid'] = 0;
                $mCustomer = new Customer();
                $result = $mCustomer->save($update_cu, $w);
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('customer');
                }

                $update_mcl['sid'] = 0;
                $mMarketClue = new MarketClue();
                $result = $mMarketClue->save($update_mcl, $w);
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('market_clue');
                }

                //删除学习管家账号
                $m_us = new UserStudent();
                $result = $m_us->where($w)->delete(true);
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_delete_error('user_student');
                }
                $sinfo = get_student_info($sid);
                $w = [];
                $w['account'] = $sinfo['first_tel'];
                $w['user_type'] = 2;
                $m_user = new User();
                $result = $m_user->where($w)->delete(true);
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_delete_error('user');
                }

                if (!empty($sinfo['second_tel'])) {
                    $w['account'] = $sinfo['second_tel'];
                    $result = $m_user->where($w)->delete();
                    if (false === $result) {
                        $this->rollback();
                        return $this->sql_delete_error('user');
                    }
                }
                
                // 软删除
                $student = Student::get($sid);
                $rs = $student->delete();
                if ($rs === false) {
                    $this->rollback();
                    return $this->sql_delete_error('student');
                }

                // 解除学员所有关系
                $mEmployeeStudent = new EmployeeStudent();
                $result = $mEmployeeStudent->delAllStudentRelation($sid);
                if (false === $result) {
                    $this->rollback();
                    return $this->user_error($mEmployeeStudent->getError());
                }

                // 学员删除日志
                StudentLog::addStudentDeleteLog($sid);

            } catch (\Exception $e) {
                $this->rollback();
                return $this->exception_error($e);
            }
            $this->commit();
            return true;
        }

        try {
            $this->startTrans();

            if (is_null($student)) {
                $student = $this->find($sid);
            }
            $rs = $student->save(['status' => self::STATUS_SEAL]);
            if ($rs === false) return exception('封存失败');
            //$rs = (new ClassStudent())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('退出班级异常，请重试');
            //
            //$rs = (new CourseArrangeStudent())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('退出相关课程异常，请重试');
            //
            //$rs = (new EmployeeStudent())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new Order())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new OrderItem())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new OrderReceiptBill())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new OrderReceiptBillItem())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new OrderRefund())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new OrderTransfer())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new Review())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new ReviewStudent())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new Student())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentAbsence())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentAttendSchoolLog())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentAttendance())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentLeave())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentLesson())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentLessonHour())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentLessonStop())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentLog())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentMoneyHistory())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentReturnVisit())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new StudentSuspend())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new SwipingCardRecord())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');
            //
            //$rs = (new TrialListenArrange())->where('sid', $sid)->delete();
            //if ($rs === false) return $this->user_error('删除异常，请重试');

            $this->commit();
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        return true;
    }

    /**
     * 更新学员的课时数
     * @param  integer $sid [description]
     * @return [type]       [description]
     */
    public function updateLessonHours($sid = 0)
    {
        if ($sid == 0) {
            $sid = $this->getData('sid');
        }

        $student_info = get_student_info($sid,false);

        $w_sl['sid'] = $sid;
        $w_sl['lesson_status'] = ['LT', 2];

        $student_lesson_hours = 0.00;
        $student_lesson_remain_hours = 0.00;

        $mStudentLesson = new StudentLesson();

        $sl_list = $mStudentLesson->where($w_sl)->select();

        foreach ($sl_list as $sl) {
            $student_lesson_hours += ($sl['lesson_hours'] - $sl['refund_lesson_hours'] - $sl['transfer_lesson_hours']);
            $student_lesson_remain_hours += $sl['remain_lesson_hours'];
        }

        $update_student['student_lesson_hours'] = $student_lesson_hours;
        $update_student['student_lesson_remain_hours'] = $student_lesson_remain_hours;

        if($student_lesson_remain_hours == 0 ){
            if($student_info['status'] != self::STATUS_FINISH && $student_lesson_hours > 0) {
                $update_student['status'] = self::STATUS_FINISH;
            }
        }else{
            if($student_info['status'] == self::STATUS_FINISH){
                $update_student['status'] = self::STATUS_NORMAL;
            }
        }

        $w_update['sid'] = $sid;
        $result = $this->save($update_student, $w_update);

        if (false === $result) {
            return $this->sql_save_error('student');
        }
        return true;

    }


    /**
     * 导入电子钱包金额
     * @param  [type] $data [description]
     * @param  [type] $check_repeat [description]
     * @return [type]       [description]
     */
    public function importMoney($input, $check_repeat = false)
    {
        $rule = [
            'initial_money' => 'require|float|gt:0',
        ];
        $res = $this->validate($rule)->validateData($input);
        if ($res === false) {
            return false;
        }
        $this->startTrans();
        try {
            // 更新学员钱包余额
            $m_student = $this->where('sid', $input['sid'])->find();

            if (!$m_student) {
                $this->rollback();
                return $this->user_error('学员ID不存在:' . $input['sid']);
            }

            if ($check_repeat) {
                if ($m_student->money > 0 && $m_student->money == $input['initial_money']) {
                    $this->rollback();
                    return $this->user_error('已经导入过该学员课时!');
                }
            }


            $after_amount = $m_student['money'] + $input['initial_money'];

            // 更新电子钱包余额变动记录表
            $dada['og_id'] = gvar('og_id');
            $dada['business_type'] = 10;
            $dada['bid'] = $m_student->bid;
            $dada['sid'] = $input['sid'];
            $dada['amount'] = $input['initial_money'];
            $dada['before_amount'] = $m_student->money;
            $dada['after_amount'] = $after_amount;
            $dada['remark'] = $input['remark'];


            $m_smh = new StudentMoneyHistory;
            $result = $m_smh->createMoneyHistory($dada);
            if (!$result) {
                $this->rollack();
                return $this->user_error($m_smh->getError());
            }

            $student_name = $m_student->student_name;
            $status = $m_student->status;

            $m_student->money = $after_amount;
            $result = $m_student->allowField(true)->save();

            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student');
            }
        } catch (Exception $e) {
            $this->rollback();
            return $this->deal_exception($e->getMessage(), $e);
        }

        $this->commit();

        return true;

    }


    /**
     * 转校区
     * @param $to_bid
     */
    public function transferBranch($to_bid)
    {
        $sid = $this->getData('sid');
        $this->startTrans();
        try {
            //记录转校日志
            $m_student_log = new StudentLog();

            $result = $m_student_log->addTransferBranchLog($sid, $to_bid);
            if (!$result) {
                $this->rollback();
                return $this->user_error($m_student_log->getError());
            }
            //转student_lesson
            $update_sl['bid'] = $to_bid;
            $w['sid'] = $this->getData('sid');
            $m_student_lesson = new StudentLesson();
            $result = $m_student_lesson->save($update_sl, $w);

            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student_lesson');
            }

            $this->bid = $to_bid;

            $result = $this->save();

            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student');
            }

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();
        return true;
    }

    /**
     * 兑换储值卡
     * @param $input
     * @return bool
     */
    public function changeDc($input)
    {
        $need_fields = ['dc_id', 'expire_int_day'];

        if (!$this->checkInputParam($input, $need_fields)) {
            return false;
        }

        $student_info = $this->getData();

        $sid = $this->getData('sid');

        $dc_info = get_dc_info($input['dc_id']);

        if (!$dc_info) {
            return $this->user_error('储值卡不存在!');
        }

        $sdc['dc_id'] = $input['dc_id'];
        $sdc['start_amount'] = $dc_info['amount'];
        $sdc['remain_amount'] = $dc_info['amount'];
        $sdc['buy_int_day'] = int_day(time());
        $sdc['buy_type'] = 1;
        $sdc['expire_int_day'] = format_int_day($input['expire_int_day']);
        $sdc['upgrade_vip_level'] = $dc_info['upgrade_vip_level'];

        array_copy($sdc, $student_info, ['og_id', 'bid', 'sid']);

        $this->startTrans();

        try {
            $m_sdc = new StudentDebitCard();
            $result = $m_sdc->save($sdc);
            if (!$result) {
                $this->rollback();
                return $this->sql_add_error('student_debit_card');
            }

            $sdc['sdc_id'] = $m_sdc->sdc_id;

            if ($sdc['upgrade_vip_level'] > 0 && $student_info['vip_level'] < $sdc['upgrade_vip_level']) {
                $this->vip_level = $sdc['upgrade_vip_level'];

                $result = $this->save();

                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('student');
                }
            }
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();
        return $sdc;
    }


    /**
     * 转让金额
     * @param  Studnet $studnet [description]
     * @param  [type]  $input   [description]
     * @return [type]           [description]
     */
    public function transferMoney(Student $from_student, $input)
    {
        $this->startTrans();
        try {
            $data['from_sid'] = $from_student->sid;
            $data['to_sid'] = $input['to_sid'];
            $data['amount'] = $input['amount'];
            $data['remark'] = $input['remark'];

            $from_student->toArray();
            array_copy($data, $from_student, ['og_id', 'bid']);

            $m_tmh = new TransferMoneyHistory();
            $res = $m_tmh->data([])->isUpdate(false)->save($data);
            if (!$res) {
                $this->rollback();
                return $this->sql_add_error('transfer_money_history');
            }

            $m_stu = new Student();
            $to_student = $m_stu->where('sid', $input['to_sid'])->find();

            $m_smh = new StudentMoneyHistory();
            $from_data['business_type'] = StudentMoneyHistory::BUSINESS_TYPE_OUT;
            $from_data['amount'] = $input['amount'];
            $from_data['before_amount'] = $from_student->money;
            $from_data['after_amount'] = $from_student->money - $input['amount'];
            $from_data['remark'] = '转出：' . $input['remark'];
            array_copy($from_data, $from_student, ['og_id', 'bid', 'sid']);

            $to_data['business_type'] = StudentMoneyHistory::BUSINESS_TYPE_IN;
            $to_data['amount'] = $input['amount'];
            $to_data['before_amount'] = $to_student->money;
            $to_data['after_amount'] = $to_student->money + $input['amount'];
            $to_data['remark'] = '转入：' . $input['remark'];
            $to_student->toArray();
            array_copy($to_data, $to_student, ['og_id', 'bid', 'sid']);

            $from_res = $m_smh->data([])->isUpdate(false)->save($from_data);
            if (!$from_res) {
                $this->rollback();
                return $this->sql_add_error('student_money_history');
            }

            $to_res = $m_smh->data([])->isUpdate(false)->save($to_data);
            if (!$to_res) {
                $this->rollback();
                return $this->sql_add_error('student_money_history');
            }

            $from_student->money = $from_student->money - $input['amount'];
            $from_student->save();

            $to_student->money = $to_student->money + $input['amount'];
            $to_student->save();

            //添加一条 转让金额操作日志
            StudentLog::addTransMoneysLog($data,$from_student);

        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }
        $this->commit();

        return true;

    }

    /**
     * 转让课时
     * @param $input
     * @return bool
     */
    public function transferHours($input)
    {
        $need_fields = ['to_sid', 'sl_id', 'nums', 'remark'];

        if (!$this->checkInputParam($input, $need_fields)) {
            return false;
        }

        $student_info = $this->getData();
        $from_sid = $this->getData('sid');
        $to_sid = intval($input['to_sid']);

        $thh['from_sid'] = $from_sid;
        $thh['to_sid'] = $to_sid;
        $thh['from_sl_id'] = $input['sl_id'];
        $thh['bid'] = $student_info['bid'];
        $thh['og_id'] = $student_info['og_id'];
        $thh['lesson_hours'] = floatval($input['nums']);
        $thh['remark'] = safe_str($input['remark']);

        $from_sl_info = get_sl_info($thh['from_sl_id']);

        if (!$from_sl_info) {
            return $this->user_error('学员课时不存在!');
        }

        $to_student_info = get_student_info($thh['to_sid']);
        if (!$to_student_info) {
            return $this->user_error('接受学员不存在!');
        }


        if ($thh['lesson_hours'] > $from_sl_info['remain_lesson_hours']) {
            return $this->user_error('剩余课时不足转出课时数!');
        }

        if ($from_sl_info['lesson_status'] == 2) {
            return $this->user_error('转出课时已经结课，不能转出!');
        }

        array_copy($thh, $from_sl_info, ['lid', 'sj_ids', 'cid']);

        $sl_fields = ['lid', 'sj_ids', 'fit_grade_start', 'fit_grade_end', 'lesson_type', 'price_type', 'is_package', 'expire_time', 'is_demo'];

        $has_cid = 0;

        if ($from_sl_info['cid'] > 0) {
            $w_cs['cid'] = $from_sl_info['cid'];
            $w_cs['sid'] = $to_sid;
            $w_cs['status'] = 1;
            $w_cs['is_end'] = 0;

            $cs_info = get_cs_info($w_cs);

            if ($cs_info) {
                $sl_fields[] = 'cid';
                $has_cid = 1;
            }

        }

        $m_from_sl = new StudentLesson($from_sl_info);

        $thh['lesson_amount'] = $m_from_sl->getConsumeLessonAmount($thh['lesson_hours']);

        $this->startTrans();
        try {
            //创建新的转让学员课时记录
            $mStudentLesson = new StudentLesson();
            $to_sl_info = [];
            $to_sl_info['sid'] = $thh['to_sid'];
            $to_sl_info['lesson_status'] = ['LT',2];

            array_copy($to_sl_info, $from_sl_info, $sl_fields);

            $ex_sl_info = get_sl_info($to_sl_info);

            if ($ex_sl_info) {
                $update_to_sl['remain_lesson_hours'] = $ex_sl_info['remain_lesson_hours'] + $thh['lesson_hours'];
                $update_to_sl['lesson_hours'] = $ex_sl_info['lesson_hours'] + $thh['lesson_hours'];
                $update_to_sl['trans_in_lesson_hours'] = $ex_sl_info['trans_in_lesson_hours'] + $thh['lesson_hours'];

                $update_to_sl['lesson_amount']        = $ex_sl_info['lesson_amount'] + $thh['lesson_amount'];
                $update_to_sl['remain_lesson_amount'] = $ex_sl_info['remain_lesson_amount'] + $thh['lesson_amount'];

                $w_update_to_sl['sl_id'] = $ex_sl_info['sl_id'];
                $result = $mStudentLesson->save($update_to_sl, $w_update_to_sl);
                if (false === $result) {
                    $this->rollback();
                    return $this->sql_save_error('student_lesson');
                }


                $to_sl_info = $ex_sl_info;
                array_copy($to_sl_info, $update_to_sl, ['remain_lesson_hours', 'lesson_hours', 'trans_in_lesson_hours']);

            } else {
                array_copy($to_sl_info, $to_student_info, ['og_id', 'bid']);
                $to_sl_info['lesson_hours'] = $thh['lesson_hours'];
                $to_sl_info['trans_in_lesson_hours'] = $thh['lesson_hours'];
                $to_sl_info['remain_lesson_hours'] = $thh['lesson_hours'];

                $to_sl_info['lesson_amount'] = $thh['lesson_amount'];
                $to_sl_info['remain_lesson_amount'] = $thh['lesson_amount'];

                $result = $mStudentLesson->save($to_sl_info);
                if (!$result) {
                    $this->rollback();
                    return $this->sql_add_error('student_lesson');
                }

                $to_sl_info['sl_id'] = $mStudentLesson->sl_id;
            }

            //减少转出学员课时
            $update_from_sl['lesson_hours'] = $from_sl_info['lesson_hours'] - $thh['lesson_hours'];
            $update_from_sl['remain_lesson_hours'] = $from_sl_info['remain_lesson_hours'] - $thh['lesson_hours'];
            $update_from_sl['trans_out_lesson_hours'] = $from_sl_info['trans_out_lesson_hours'] + $thh['lesson_hours'];

            if($from_sl_info['lesson_amount'] > 0){
                $update_from_sl['lesson_amount']        = min_val($from_sl_info['lesson_amount'] - $thh['lesson_amount']);
                $update_from_sl['remain_lesson_amount'] = min_val($from_sl_info['remain_lesson_amount'] - $thh['lesson_amount']);
            }

            $w_update_from_sl['sl_id'] = $from_sl_info['sl_id'];

            $m_from_sl = new StudentLesson();
            $result = $m_from_sl->save($update_from_sl, $w_update_from_sl);

            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student_lesson');
            }

            $thh['to_sl_id'] = $to_sl_info['sl_id'];

            $m_thh = new TransferHourHistory();

            $result = $m_thh->save($thh);

            if (!$result) {
                $this->rollback();
                return $this->sql_add_error('transfer_hour_history');
            }

            $result = $this->updateLessonHours($from_sid);
            if (false === $result) {
                $this->rollback();
                return false;
            }

            $result = $this->updateLessonHours($to_sid);
            if (false === $result) {
                $this->rollback();
                return false;
            }

            // 添加一条转让课时 操作记录
            StudentLog::addTransHoursLog($thh,$this);


        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;
    }

    /**
     * @param $sid
     */
    public function refreshCustomerSignup($sid)
    {
        $w_cu['sid'] = $sid;
        $mCustomer = new Customer();
        $customer = $mCustomer->where($w_cu)->find();
        if (!$customer) {
            return true;
        }
        $mOrder = new Order();
        $w_order['sid'] = $sid;
        $order_info = $mOrder->where($w_order)->find();
        if (!$order_info) {
            $customer->is_reg = 0;
            $customer->signup_int_day = 0;
            $customer->signup_amount = 0.00;
            $result = $customer->save();
            if (false === $result) {
                return $this->sql_save_error('customer');
            }
        }
        return true;
    }

    /**
     * 消费钱包余额
     * @param $amount
     * @param string $remark
     * @param int $bs_type
     * @return bool
     */
    public function consumeMoney($amount, $remark = '', $bs_type = 17)
    {
        $sinfo = $this->getData();
        if (empty($sinfo) || !isset($sinfo['money'])) {
            return $this->user_error('参数错误!学员信息不存在!');
        }
        if ($sinfo['money'] < $amount) {
            $msg = sprintf("学员%s的钱包余额不够扣除金额,应扣:%s,剩余:%s", $sinfo['student_name'], $amount, $sinfo['money']);
            return $this->user_error($msg);
        }

        $update['money'] = $sinfo['money'] - $amount;

        $mStudentMoneyHistory = new StudentMoneyHistory();
        $smh['business_type'] = $bs_type;
        $smh['amount'] = $amount;
        $smh['before_amount'] = $sinfo['money'];
        $smh['after_amount'] = $update['money'];
        $smh['remark'] = $remark;

        array_copy($smh, $sinfo, ['og_id', 'bid', 'sid']);

        $this->startTrans();

        try {
            $result = $mStudentMoneyHistory->data([])->isUpdate(false)->save($smh);
            if (!$result) {
                $this->rollback();
                return $this->sql_add_error('student_money_history');
            }

            $this->money = $update['money'];

            $result = $this->save();
            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student');
            }
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;

    }

    /**
     * 撤销消费余额
     * @param $amount
     * @param $remark
     * @return bool
     */
    public function rollbackConsumeMoney($amount, $remark)
    {
        $sinfo = $this->getData();
        if (empty($sinfo) || !isset($sinfo['money'])) {
            return $this->user_error('参数错误!学员信息不存在!');
        }

        $update['money'] = $sinfo['money'] + $amount;

        $mStudentMoneyHistory = new StudentMoneyHistory();
        $smh['business_type'] = StudentMoneyHistory::BUSINESS_TYPE_ATTENDACE_ROLLBACK;
        $smh['amount'] = $amount;
        $smh['before_amount'] = $sinfo['money'];
        $smh['after_amount'] = $update['money'];
        $smh['remark'] = $remark;

        array_copy($smh, $sinfo, ['og_id', 'bid', 'sid']);

        $this->startTrans();

        try {
            $result = $mStudentMoneyHistory->data([])->isUpdate(false)->save($smh);
            if (!$result) {
                $this->rollback();
                return $this->sql_add_error('student_money_history');
            }

            $this->money = $update['money'];

            $result = $this->save();
            if (false === $result) {
                $this->rollback();
                return $this->sql_save_error('student');
            }
        } catch (\Exception $e) {
            $this->rollback();
            return $this->exception_error($e);
        }

        $this->commit();

        return true;
    }

    /**
     *  更新市场渠道
     * @param $be_channel
     * @param $to_channel
     */
    public function updateMakeChannelID($be_channel,$to_channel)
    {
        $mMarketChannel = new MarketChannel();
        $to_mcl_model = $mMarketChannel->get($to_channel);
        if (empty($to_mcl_model)){
            return $this->user_error('合并到渠道不存在');
        }
        $w['mc_id'] = $be_channel;
        $data = $this->where($w)->select();
        if (!empty($data)){
            foreach ($data as $k => $v){
                $uodate_mc['mc_id'] = $to_channel;
                $update_w['sid'] = $v['sid'];
                $rs = $v->data([])->save($uodate_mc,$update_w);
                if (!$rs){
                    return $this->user_error('student');
                }
            }
        }
        return true;
    }

}